<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Zero to One]]></title>
  
  <link href="/blog/atom.xml" rel="self"/>
  <link href="http://qunwang6.github.io/blog/"/>
  <updated>2015-06-06T13:50:37.000Z</updated>
  <id>http://qunwang6.github.io/blog/</id>
  
  <author>
    <name><![CDATA[Qun Wang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[baidu OCR]]></title>
    <link href="http://qunwang6.github.io/blog/baiduOCR/"/>
    <id>http://qunwang6.github.io/blog/baiduOCR/</id>
    <published>2015-06-05T16:00:00.000Z</published>
    <updated>2015-06-06T13:50:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="百度OCR文字识别API_for_Python">百度OCR文字识别API for Python</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="tag">-</span>*<span class="tag">-</span> <span class="rule"><span class="attribute">coding</span>:<span class="value"> utf-<span class="number">8</span> -*-</span><br><span class="line">import sys, urllib, urllib2, json</span><br><span class="line">f = <span class="function">open</span>(<span class="string">"test.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">url = <span class="string">'http://apis.baidu.com/apistore/idlocr/ocr'</span></span><br><span class="line"></span><br><span class="line">data = &#123;&#125;</span><br><span class="line">data[<span class="string">'fromdevice'</span>] = <span class="string">"pc"</span></span><br><span class="line">data[<span class="string">'clientip'</span>] = <span class="string">"10.10.10.0"</span></span><br><span class="line">data[<span class="string">'detecttype'</span>] = <span class="string">"LocateRecognize"</span></span><br><span class="line">data[<span class="string">'languagetype'</span>] = <span class="string">"CHN_ENG"</span></span><br><span class="line">data[<span class="string">'imagetype'</span>] = <span class="string">"1"</span>  #`<span class="number">2</span>`代表图片原文件（只支持JPG）</span><br><span class="line">data[<span class="string">'image'</span>] = <span class="string">""</span>    ##image base64 data</span><br><span class="line"></span><br><span class="line">decoded_data = urllib.<span class="function">urlencode</span>(data)</span><br><span class="line">req = urllib2.<span class="function">Request</span>(url, data = decoded_data)</span><br><span class="line"></span><br><span class="line">req.<span class="function">add_header</span>(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line">req.<span class="function">add_header</span>(<span class="string">"apikey"</span>, <span class="string">"自己的apikey"</span>)</span><br><span class="line"></span><br><span class="line">resp = urllib2.<span class="function">urlopen</span>(req)</span><br><span class="line">content = resp.<span class="function">read</span>()</span><br><span class="line"><span class="function">if</span>(content):</span><br><span class="line">    <span class="function">print</span>(content)</span><br><span class="line">    f.<span class="function">write</span>(content)</span></span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="image_convert_to_base64_code">image convert to base64 code</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">openssl base64 &lt; image.jpg | tr -<span class="keyword">d</span> '\<span class="keyword">n</span>' | pbcopy</span><br><span class="line"></span><br><span class="line"><span class="keyword">cat</span> image.jpg | openssl base64 | tr -<span class="keyword">d</span> '\<span class="keyword">n</span>' | pbcopy</span><br><span class="line"></span><br><span class="line">openssl base64 -<span class="keyword">in</span> <span class="keyword">out</span>.jpg -<span class="keyword">out</span> filename.b64</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>data:image/png;base64,{base64 image code}</code>//直接复制到浏览器地址栏回车</li>
<li><code>&lt;img src=&quot;data:image/jpg;base64,{base64 image code}/&gt;</code>//或者网页里嵌入</li>
</ul>
</blockquote>
<h2 id="References:">References:</h2><ul>
<li><a href="http://apistore.baidu.com/apiworks/servicedetail/146.html" target="_blank" rel="external">百度OCR文字识别_工具_API服务_API服务_API Store</a></li>
<li>apikey <a href="http://apistore.baidu.com/astore/toolshttpproxy?apiId=usa-&amp;isAworks=1" target="_blank" rel="external">API调试工具_API Store</a></li>
<li><a href="https://github.com/JeremyWei/baidu-ocr" target="_blank" rel="external">JeremyWei/baidu-ocr</a></li>
<li><a href="http://superuser.com/questions/120796/os-x-base64-encode-via-command-line" target="_blank" rel="external">osx - OS X: Base64 encode via command line - Super User</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="百度OCR文字识别API_for_Python">百度OCR文字识别API for Python</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="tag">-</span>*<span class="tag">-</span> <span class="rule"><span class="attribute">coding</span>:<span class="value"> utf-<span class="number">8</span> -*-</span><br><span class="line">import sys, urllib, urllib2, json</span><br><span class="line">f = <span class="function">open</span>(<span class="string">"test.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">url = <span class="string">'http://apis.baidu.com/apistore/idlocr/ocr'</span></span><br><span class="line"></span><br><span class="line">data = &#123;&#125;</span><br><span class="line">data[<span class="string">'fromdevice'</span>] = <span class="string">"pc"</span></span><br><span class="line">data[<span class="string">'clientip'</span>] = <span class="string">"10.10.10.0"</span></span><br><span class="line">data[<span class="string">'detecttype'</span>] = <span class="string">"LocateRecognize"</span></span><br><span class="line">data[<span class="string">'languagetype'</span>] = <span class="string">"CHN_ENG"</span></span><br><span class="line">data[<span class="string">'imagetype'</span>] = <span class="string">"1"</span>  #`<span class="number">2</span>`代表图片原文件（只支持JPG）</span><br><span class="line">data[<span class="string">'image'</span>] = <span class="string">""</span>    ##image base64 data</span><br><span class="line"></span><br><span class="line">decoded_data = urllib.<span class="function">urlencode</span>(data)</span><br><span class="line">req = urllib2.<span class="function">Request</span>(url, data = decoded_data)</span><br><span class="line"></span><br><span class="line">req.<span class="function">add_header</span>(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line">req.<span class="function">add_header</span>(<span class="string">"apikey"</span>, <span class="string">"自己的apikey"</span>)</span><br><span class="line"></span><br><span class="line">resp = urllib2.<span class="function">urlopen</span>(req)</span><br><span class="line">content = resp.<span class="function">read</span>()</span><br><span class="line"><span class="function">if</span>(content):</span><br><span class="line">    <span class="function">print</span>(content)</span><br><span class="line">    f.<span class="function">write</span>(content)</span></span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="OCR" scheme="http://qunwang6.github.io/blog/tags/OCR/"/>
    
      <category term="Python" scheme="http://qunwang6.github.io/blog/tags/Python/"/>
    
      <category term="base64" scheme="http://qunwang6.github.io/blog/tags/base64/"/>
    
      <category term="OCR" scheme="http://qunwang6.github.io/blog/categories/OCR/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CNNIC证书]]></title>
    <link href="http://qunwang6.github.io/blog/CNNICCertificate/"/>
    <id>http://qunwang6.github.io/blog/CNNICCertificate/</id>
    <published>2015-06-02T16:00:00.000Z</published>
    <updated>2015-06-03T15:03:38.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="http://www.williamlong.info/archives/4125.html" target="_blank" rel="external">CNNIC证书的清除方法 -月光博客</a></li>
<li><a href="http://program-think.blogspot.com/2010/02/remove-cnnic-cert.html" target="_blank" rel="external">CNNIC 证书的危害及各种清除方法 @ 编程随想的博客</a></li>
<li><a href="http://www.v2ex.com/t/195758#reply16" target="_blank" rel="external">已经越狱的 iOS 设备上 屏蔽系统内置根证书的插件已经出来了 - V2EX</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><a href="http://www.williamlong.info/archives/4125.html" target="_blank" rel="external">CNNIC证书的清除方法 -月光博客</a></li>
<li><a href="ht]]>
    </summary>
    
      <category term="GFW" scheme="http://qunwang6.github.io/blog/tags/GFW/"/>
    
      <category term="GFW" scheme="http://qunwang6.github.io/blog/categories/GFW/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A Programmer's Rantings]]></title>
    <link href="http://qunwang6.github.io/blog/programmersRantings/"/>
    <id>http://qunwang6.github.io/blog/programmersRantings/</id>
    <published>2015-05-31T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="language">language</h2><ul>
<li><code>汇编</code></li>
<li><code>C</code> <code>D</code></li>
<li><code>Lisp</code> <code>Scheme</code> <code>Clojure</code></li>
<li><code>C++</code> <code>Java</code></li>
<li><code>Perl</code> <code>Ruby</code> <code>Python</code> <code>JRuby</code> <code>Jython</code> <code>Rhino</code> <code>Groovy</code> <code>Smalltalk</code> <code>Cobol</code> <code>Fortran</code></li>
<li><code>Haskell</code> <code>Lua</code></li>
<li>并行语言<code>Erlang</code></li>
<li><code>R</code> <code>Matlab</code> <code>Mathematica</code></li>
</ul>
<h2 id="Web框架">Web框架</h2><ul>
<li><code>Pylons</code></li>
<li><code>Django</code></li>
<li><code>TurboGears</code></li>
<li><code>Zope</code></li>
<li><code>Subway</code></li>
</ul>
<h2 id="TextEditor">TextEditor</h2><ul>
<li><code>Emacs</code></li>
<li><code>Elisp</code></li>
<li><code>Eclipse</code></li>
<li><code>IntelliJ</code><a id="more"></a>
<blockquote>
<p>Emacs 多字节扩展<code>Mule</code></p>
</blockquote>
</li>
</ul>
<h2 id="word">word</h2><ul>
<li><code>TL;DR</code>指的是Too Long;Didn’t Read,太长了，懒得看。通常是回复他人又臭又长的文章时用的话。这里作者的意思是他要说一点不得不说的废话。</li>
<li>人脑模式匹配 &gt; computer % 100000 ,computer 顺序执行，人脑每个神经元都可独立工作</li>
<li><code>官僚主义</code> <code>静态类型系统</code></li>
<li><code>Helpful Critical Guy Syndrome</code> <code>HCGS</code></li>
<li>Python <code>Ctrl-D</code>终端模拟器<code>EOF</code>字符，<code>quit</code>违反<code>REPL</code>语义</li>
<li>很多职业程序员其实很清楚自己不擅长编程，然而他们还是能贡献自己的力量。</li>
<li>Lisp很难掌握，但它是唯一能让我继续快乐的语言。</li>
<li>Emacs很难掌握，但却是受益终身的投资。</li>
</ul>
<h2 id="company">company</h2><ul>
<li>Facebook:<code>PHP</code> <code>C++</code></li>
<li>Google:<code>Python</code></li>
</ul>
<h2 id="learning">learning</h2><blockquote>
<p>学习曲线:静态类型系统 &gt; 动态类型语言</p>
</blockquote>
<ul>
<li><code>C++</code> &gt; <code>C</code> <code>Smalltalk</code></li>
<li><code>OCaml</code> &gt; <code>Lisp</code></li>
<li><code>Nice</code> &gt; <code>Java</code></li>
<li><code>Perl</code> &gt; <code>Ruby</code> <code>Python</code></li>
<li>强制性的静态类型:<code>Java</code> <code>C++</code> <code>Ocaml</code> <code>Ada</code><br><img src="http://blogs.agilefaqs.com/wp-content/uploads/2009/09/strongweakstaticdynamic_type.png" alt="Static vs. Dynamic"></li>
<li><code>人工智能</code> <code>机器学习</code> <code>自然语言处理</code> <code>模式匹配</code></li>
<li><code>神经网络</code> <code>遗传算法</code> <code>贝叶斯分类</code> <code>集群算法</code> <code>图像匹配</code></li>
<li><p><code>编译器</code> <code>解释器</code></p>
<blockquote>
<p>不懂编译器原理的人，也不懂计算机原理。||编译器会接收一串符号流，根据预先定义号的规则，分析出这串符号的结构，然后把它转换成另一串符号流。</p>
</blockquote>
</li>
<li><p>实时通讯:Unix <code>talk</code> 命令</p>
</li>
<li><code>Python 3000</code></li>
<li><code>ABD</code>:All But Dissertation</li>
</ul>
<h2 id="book">book</h2><ul>
<li><code>Clojure编程的乐趣</code></li>
<li><code>重构</code></li>
<li><code>Practical Common Lisp</code></li>
<li><code>设计模式</code></li>
<li><code>Perl 语言编程</code></li>
<li><code>Think in Java</code></li>
<li><code>Why&#39;s Poignant Guide</code></li>
<li><code>Python Cookbook</code></li>
<li><code>Jython Essentials</code></li>
<li><code>超越Java</code></li>
<li>www.jwz.org/blog</li>
<li><code>软件模式</code></li>
<li><a href="http://en.wikipedia.org/wiki/Foundations_of_mathematics" target="_blank" rel="external">math</a></li>
<li><code>算法设计手册</code></li>
<li><code>算法导论</code></li>
<li><code>Java并发编程</code></li>
<li><code>没有银弹</code></li>
</ul>
<hr>
<h2 id="References:">References:</h2><ul>
<li><a href="http://architects.dzone.com/articles/should-your-static-go-static" target="_blank" rel="external">Choosing Static vs. Dynamic Languages for Your Startup | Architects Zone</a></li>
<li><a href="http://blogs.agilefaqs.com/2011/07/11/dynamic-typing-is-not-weak-typing/" target="_blank" rel="external">» Dynamic Typing is NOT Weak Typing » Managed Chaos by Naresh Jain</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="language">language</h2><ul>
<li><code>汇编</code></li>
<li><code>C</code> <code>D</code></li>
<li><code>Lisp</code> <code>Scheme</code> <code>Clojure</code></li>
<li><code>C++</code> <code>Java</code></li>
<li><code>Perl</code> <code>Ruby</code> <code>Python</code> <code>JRuby</code> <code>Jython</code> <code>Rhino</code> <code>Groovy</code> <code>Smalltalk</code> <code>Cobol</code> <code>Fortran</code></li>
<li><code>Haskell</code> <code>Lua</code></li>
<li>并行语言<code>Erlang</code></li>
<li><code>R</code> <code>Matlab</code> <code>Mathematica</code></li>
</ul>
<h2 id="Web框架">Web框架</h2><ul>
<li><code>Pylons</code></li>
<li><code>Django</code></li>
<li><code>TurboGears</code></li>
<li><code>Zope</code></li>
<li><code>Subway</code></li>
</ul>
<h2 id="TextEditor">TextEditor</h2><ul>
<li><code>Emacs</code></li>
<li><code>Elisp</code></li>
<li><code>Eclipse</code></li>
<li><code>IntelliJ</code>]]>
    
    </summary>
    
      <category term="note" scheme="http://qunwang6.github.io/blog/tags/note/"/>
    
      <category term="note" scheme="http://qunwang6.github.io/blog/categories/note/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Frontend Knowledge Structure]]></title>
    <link href="http://qunwang6.github.io/blog/FrontendKnowledgeStructure/"/>
    <id>http://qunwang6.github.io/blog/FrontendKnowledgeStructure/</id>
    <published>2015-05-30T16:00:00.000Z</published>
    <updated>2015-06-03T13:17:05.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://raw.github.com/JacksonTian/fks/master/figures/fks.jpg" alt=""><br><a id="more"></a></p>
<h2 id="前端自动化工具">前端自动化工具</h2><ul>
<li><a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">gulpjs/gulp</a><br> <a href="http://segmentfault.com/a/1190000000372120" target="_blank" rel="external">Gulp.js：比 Grunt 更简单的自动化的项目构建利器 - SegmentFault</a></li>
<li><a href="https://github.com/jorgebastida/glue" target="_blank" rel="external">jorgebastida/glue</a></li>
</ul>
<hr>
<ul>
<li><a href="http://kachibito.net/web-design/wonderful-css-gallery.html" target="_blank" rel="external">ｃｓｓベースの素晴らしいWebサイトデザイン・ギャラリー - かちびと.net</a></li>
<li><a href="http://quirktools.com/" target="_blank" rel="external">QuirkTools / 网站快速生成工具</a></li>
</ul>
<hr>
<p>References:</p>
<ul>
<li><a href="http://html5ify.com/fks/" target="_blank" rel="external">http://html5ify.com/fks/</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://raw.github.com/JacksonTian/fks/master/figures/fks.jpg" alt=""><br>]]>
    
    </summary>
    
      <category term="前端" scheme="http://qunwang6.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="http://qunwang6.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Help Sheet]]></title>
    <link href="http://qunwang6.github.io/blog/HelpSheet/"/>
    <id>http://qunwang6.github.io/blog/HelpSheet/</id>
    <published>2015-05-30T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:49.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="http://kachibito.net/wp-content/uploads/2009/08/wp-cheat1.html" target="_blank" rel="external">WP Help Sheet</a></li>
<li><a href="https://github.com/tiimgreen/github-cheat-sheet" target="_blank" rel="external">tiimgreen/github-cheat-sheet</a><!--next page-->
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><a href="http://kachibito.net/wp-content/uploads/2009/08/wp-cheat1.html" target="_blank" rel="external">WP Help Sheet</a></li>
<li>]]>
    </summary>
    
      <category term="Sheet" scheme="http://qunwang6.github.io/blog/tags/Sheet/"/>
    
      <category term="Sheet" scheme="http://qunwang6.github.io/blog/categories/Sheet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS developer tips]]></title>
    <link href="http://qunwang6.github.io/blog/iOSDeveloperTips/"/>
    <id>http://qunwang6.github.io/blog/iOSDeveloperTips/</id>
    <published>2015-05-30T16:00:00.000Z</published>
    <updated>2015-06-04T01:05:28.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Start_Developing_iOS_Apps_Today">Start Developing iOS Apps Today</h3><p><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/" target="_blank" rel="external">Start Developing iOS Apps Today: Setup</a></p>
<h3 id="网页版_constraints_代码生成工具">网页版 constraints 代码生成工具</h3><p><a href="http://constraints.icodeforlove.com/" target="_blank" rel="external">iOS/Mac Autolayout Constraints</a></p>
<h3 id="Create_Custom_Keyboard_for_iOS_8">Create Custom Keyboard for iOS 8</h3><p>Alexei Baboulevitch is developing a custom keyboard for iOS 8 with Swift:</p>
<pre><code>– No bitmaps! Everything <span class="keyword">is</span> rendered <span class="keyword">using</span> CoreGraphics.
– <span class="keyword">Dynamic</span> layouts! All the keys are laid <span class="keyword">out</span> programmatically.
– Auto-capitalization, period shortcut, keyboard clicks.
</code></pre><p><a href="https://github.com/archagon/tasty-imitation-keyboard" target="_blank" rel="external">tasty-imitation-keyboard</a></p>
<h3 id="Flappy_Bird_in_Swift">Flappy Bird in Swift</h3><p><a href="https://github.com/fullstackio/FlappySwift" target="_blank" rel="external">FlappySwift</a></p>
<h3 id="Gesture_recognizer_tool">Gesture recognizer tool</h3><p><a href="https://github.com/didierbrun/DBPathRecognizer" target="_blank" rel="external">DBPathRecognizer</a><br><a id="more"></a></p>
<h3 id="Open_Source_Weather_App_in_Swift">Open Source Weather App in Swift</h3><p><a href="https://github.com/Mav3r1ck/Project-RainMan" target="_blank" rel="external">Project-RainMan</a><br><img src="https://camo.githubusercontent.com/7ebcddf23366d36c0283af08a7032fc0f1cf5a6f/687474703a2f2f7331302e706f7374696d672e6f72672f7978793033336136682f50726f6a6563745f52616e5f4d61696e5f4261636b67726f756e642e706e67" alt=""></p>
<h3 id="Convert_UIImage_to_ASCII">Convert UIImage to ASCII</h3><p><a href="https://github.com/bkoc/BKAsciiImage" target="_blank" rel="external">BKAsciiImage</a><br><img src="https://github.com/bkoc/BKAsciiImage/raw/master/Screenshots/example.gif" alt=""></p>
<h3 id="KZPlayground">KZPlayground</h3><p><a href="https://github.com/krzysztofzablocki/KZPlayground" target="_blank" rel="external">Playgrounds for Objective-C</a></p>
<h3 id="Flipping_Menu">Flipping Menu</h3><p>Flipping menu system written in Swift. Uses @IBDesignable for quick and easy implementation.<br><a href="https://github.com/ziligy/JGFlipMenu" target="_blank" rel="external">JGFlipMenu</a><br><img src="https://raw.githubusercontent.com/ziligy/JGFlipMenu/master/JGFlipMenu.gif" alt=""></p>
<h3 id="TestFlight——完美的iOS_app测试方案">TestFlight——完美的iOS app测试方案</h3><p><a href="http://onevcat.com/2012/01/testflight/" target="_blank" rel="external">介绍</a></p>
<h3 id="Researching_ResearchKit">Researching ResearchKit</h3><p><a href="http://petersteinberger.com/blog/2015/researching-researchkit/" target="_blank" rel="external">Researching ResearchKit</a></p>
<h3 id="移动开发支付SDK">移动开发支付SDK</h3><p><a href="https://pingxx.com/?features" target="_blank" rel="external">Ping++</a></p>
<h3 id="Microsoft_TouchDevelop">Microsoft TouchDevelop</h3><p><a href="https://github.com/Microsoft/TouchDevelop" target="_blank" rel="external">TouchDevelop</a></p>
<blockquote>
<p>TouchDevelop is a touch-friendly app creation environment for iPad, iPhone, Android, Windows, Mac, Linux. Our mobile-friendly editor makes coding fun, even on your phone or tablet!</p>
</blockquote>
<h3 id="Apple_Beta_版软件计划">Apple Beta 版软件计划</h3><p><a href="https://appleseed.apple.com/sp/betaprogram/welcome?locale=zh" target="_blank" rel="external">Apple Beta 版软件计划</a></p>
<h3 id="Duet_Display_的运行原理">Duet Display 的运行原理</h3><p><strong> <a href="https://github.com/rsms/peertalk" target="_blank" rel="external">PeerTalk</a> </strong></p>
<blockquote>
<p>由瑞典技术人员 <a href="http://rsms.me/about/" target="_blank" rel="external">Rasmus Andersson</a>开发的一种可通过 USB 基座和 TCP 协议，实现 iOS / Mac 间通讯的 Cocoa（Objective-C）库，这是 Duet Display 实现「通过数据线输出视频」的核心技术，也是与同类应用在实现方式上最大的差别。和原始的设备通讯原理相比，PeerTalk 可以在 <code>热插拔</code>状态下，实现自动断开和连接的效果.</p>
</blockquote>
<p><strong> <a href="https://theiphonewiki.com/wiki/Usbmux" target="_blank" rel="external">usbmux</a> </strong></p>
<blockquote>
<p>iTunes / iOS 设备间进行同步的 usbmux 系统和只有通过逆向所得的私有 API</p>
</blockquote>
<p><strong> <a href="https://github.com/zakk4223/CocoaSplit" target="_blank" rel="external">CocoaSplit</a> </strong></p>
<blockquote>
<p>CocoaSplit，一种用于视频流媒体服务的技术，有网友通过它成功地实现了 YouTube 视频直播，而 Duet Display 的 Mac 客户端就用了 CocoaSplit</p>
</blockquote>
<p><strong> <a href="https://github.com/BradLarson/GPUImage" target="_blank" rel="external">GPUImage</a> </strong></p>
<blockquote>
<p>GPUImage，一个由 Brad Larson 托管在 Github 上的基于 BSD 开源的 iOS 库，主要用于实现滤镜、摄像头实时滤镜等图像效果（很多「滤镜」软件都使用了这一技术），由于其处理效果是基于 GPU（图形处理器）而不是 CPU（中央处理器）的，所以一般情况下，它的处理性能更好。那么在 Duet Display 这款软件中，GPUImage 的作用发挥在了视频输出上，以便让 iOS 端的显示效果更好。</p>
</blockquote>
<ul>
<li>References:<a href="http://sspai.com/27806" target="_blank" rel="external">一款刚上架的屏幕拓展应用为何迅速走红？浅谈 Duet Display 背后的技术 - 少数派 - 高质量的应用推荐媒体</a></li>
</ul>
<h3 id="font">font</h3><p><a href="https://github.com/supermarin/YosemiteSanFranciscoFont" target="_blank" rel="external">supermarin/YosemiteSanFranciscoFont</a></p>
<h3 id="Apple_Watch">Apple Watch</h3><ul>
<li><a href="http://www.totem.training/swift-ios-tips-tricks-tutorials-blog/apple-watch-lessons-learned" target="_blank" rel="external">WatchKit Lessons Learned — Swift + iOS 8 Developer Training</a></li>
<li><a href="http://blog.mikeswanson.com/post/118262770484/watchkit-controller-life-cycle" target="_blank" rel="external">Mike Swanson’s Blog • WatchKit Controller Life Cycle</a></li>
<li><a href="http://blog.mikeswanson.com/post/117807821714/watchkit-development-tips" target="_blank" rel="external">Mike Swanson’s Blog • WatchKit Development Tips</a></li>
<li><a href="http://blog.mikeswanson.com/post/118580394879/watchkit-image-tips" target="_blank" rel="external">Mike Swanson’s Blog • WatchKit Image Tips</a></li>
</ul>
<h3 id="Swift_HTTP_for_Humans">Swift HTTP for Humans</h3><p><a href="https://github.com/JustHTTP/Just" target="_blank" rel="external">JustHTTP/Just</a></p>
<h3 id="Layers_based_charts_library_for_iOS">Layers based charts library for iOS</h3><p><a href="https://github.com/i-schuetz/SwiftCharts" target="_blank" rel="external">i-schuetz/SwiftCharts</a></p>
<h3 id="EasyIOS">EasyIOS</h3><p><a href="https://github.com/EasyIOS/EasyIOS-Swift" target="_blank" rel="external">EasyIOS/EasyIOS-Swift</a><br>MVVM+HTML+LiveLoad 来开发 IOS<br><a href="http://www.v2ex.com/t/194118#reply16" target="_blank" rel="external">EasyIOS-Swift 版本发布， MVVM+HTML+LiveLoad 来开发 IOS - V2EX</a></p>
<h3 id="background_images">background images</h3><ul>
<li><a href="https://github.com/qrohlf/trianglify" target="_blank" rel="external">qrohlf/trianglify</a></li>
<li><a href="https://github.com/qrohlf/trianglify-generator" target="_blank" rel="external">qrohlf/trianglify-generator</a></li>
<li><a href="http://qrohlf.com/trianglify-generator/" target="_blank" rel="external">Trianglify Generator</a></li>
<li><a href="http://qrohlf.com/trianglify/" target="_blank" rel="external">Trianglify by @qrohlf</a></li>
</ul>
<h3 id="ResearchKit">ResearchKit</h3><blockquote>
<p>requires Xcode 6.3 or newer</p>
</blockquote>
<ul>
<li><a href="https://github.com/ResearchKit/ResearchKit" target="_blank" rel="external">ResearchKit/ResearchKit</a></li>
<li><a href="http://www.raywenderlich.com/104575/researchkit-tutorial-with-swift" target="_blank" rel="external">ResearchKit Tutorial with Swift: Getting Started - Ray Wenderlich</a></li>
</ul>
<hr>
<h3 id="References">References</h3><ul>
<li><a href="http://iosdevelopertips.com/" target="_blank" rel="external">iOS developer tips</a></li>
<li><a href="http://www.totem.training/swift-ios-tips-tricks-tutorials-blog/" target="_blank" rel="external">Swift and iOS 8 Tips, Tricks, and Tutorials Blog — Swift + iOS 8 Developer Training</a></li>
<li><a href="http://blog.mikeswanson.com/" target="_blank" rel="external">Mike Swanson’s Blog</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Start_Developing_iOS_Apps_Today">Start Developing iOS Apps Today</h3><p><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/">Start Developing iOS Apps Today: Setup</a></p>
<h3 id="网页版_constraints_代码生成工具">网页版 constraints 代码生成工具</h3><p><a href="http://constraints.icodeforlove.com/">iOS/Mac Autolayout Constraints</a></p>
<h3 id="Create_Custom_Keyboard_for_iOS_8">Create Custom Keyboard for iOS 8</h3><p>Alexei Baboulevitch is developing a custom keyboard for iOS 8 with Swift:</p>
<pre><code>– No bitmaps! Everything <span class="keyword">is</span> rendered <span class="keyword">using</span> CoreGraphics.
– <span class="keyword">Dynamic</span> layouts! All the keys are laid <span class="keyword">out</span> programmatically.
– Auto-capitalization, period shortcut, keyboard clicks.
</code></pre><p><a href="https://github.com/archagon/tasty-imitation-keyboard">tasty-imitation-keyboard</a></p>
<h3 id="Flappy_Bird_in_Swift">Flappy Bird in Swift</h3><p><a href="https://github.com/fullstackio/FlappySwift">FlappySwift</a></p>
<h3 id="Gesture_recognizer_tool">Gesture recognizer tool</h3><p><a href="https://github.com/didierbrun/DBPathRecognizer">DBPathRecognizer</a><br>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://qunwang6.github.io/blog/tags/Swift/"/>
    
      <category term="iOS" scheme="http://qunwang6.github.io/blog/tags/iOS/"/>
    
      <category term="iOS" scheme="http://qunwang6.github.io/blog/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP2]]></title>
    <link href="http://qunwang6.github.io/blog/http2/"/>
    <id>http://qunwang6.github.io/blog/http2/</id>
    <published>2015-05-30T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:49.000Z</updated>
    <content type="html"><![CDATA[<h3 id="learning">learning</h3><blockquote>
<p>SPDY是谷歌研制的提升HTTP速度的协议，是HTTP/2.0的基础.HTTP/2 基于 SPDY 而建，性能和特性较 HTTP/1.1 有了极大的提升.</p>
</blockquote>
<h3 id="HTTP2_VS_SPDY">HTTP2 VS SPDY</h3><ul>
<li><a href="http://blog.chromium.org/2015/02/hello-http2-goodbye-spdy-http-is_9.html" target="_blank" rel="external">Chromium Blog: Hello HTTP/2, Goodbye SPDY</a></li>
<li><a href="https://blogs.akamai.com/2014/01/spdy-http-2.html" target="_blank" rel="external">SPDY &amp; HTTP 2 - The Akamai Blog</a></li>
<li><a href="http://www.qianduan.net/a-simple-performance-comparison-of-https-spdy-and-http2/" target="_blank" rel="external">HTTPS, SPDY和 HTTP/2性能的简单对比</a></li>
</ul>
<a id="more"></a>
<h3 id="HTTP2文档">HTTP2文档</h3><ul>
<li><a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="external">http2讲解 - GitBook</a></li>
<li><a href="https://github.com/fex-team/http2-spec/blob/master/HTTP2%E4%B8%AD%E8%8B%B1%E5%AF%B9%E7%85%A7%E7%89%88(06-29" target="_blank" rel="external">http2-spec/HTTP2中英对照版(06-29).md at master · fex-team/http2-spec</a>.md)</li>
<li><a href="https://docs.google.com/presentation/d/1r7QXGYOLCh4fcUq0jDdDwKJWNqWK1o4xMtYpKZCJYjM/present#slide=id.p19" target="_blank" rel="external">HTTP/2 is here, let’s optimize! - Velocity SC 2015 - Google Slides</a></li>
<li><a href="http://www.blogjava.net/yongboy/archive/2015/03/17/423531.html" target="_blank" rel="external">HTTP/2笔记之开篇 - 聂永的博客 - BlogJava</a></li>
</ul>
<h3 id="应用">应用</h3><ul>
<li><a href="https://wzyboy.im/post/1052.html" target="_blank" rel="external">使用 nghttpx 搭建 HTTP/2 代理 | wzyboy’s blog</a></li>
</ul>
<h3 id="其他">其他</h3><ul>
<li><a href="http://www.williamlong.info/archives/3879.html" target="_blank" rel="external">访问Google的神器：Chrome的QUIC协议-月光博客</a><blockquote>
<p><code>QUIC</code>协议的原理介绍：<br><code>TCP</code>、<code>UDP</code>都是计算机网络通信层的主要协议。<code>TCP</code>是面向连接的，更强调的是传输的可靠性，<code>UDP</code>是面向无连接的，也即在通信双方进行数据交换之前，无需建立连接,只要知道对方地址即可发送数据，由于<code>UDP</code>协议是无连接方式的协议，所以它的效率高，速度快，占资源少。<br>为了集合两者的优点，谷歌公司研制了一种UDP通信的改进版——<code>Quick UDP</code> Internet Connections（QUIC），快速UDP互联网连接。</p>
</blockquote>
</li>
</ul>
<p><img src="http://www.williamlong.info/upload/3879_1.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="learning">learning</h3><blockquote>
<p>SPDY是谷歌研制的提升HTTP速度的协议，是HTTP/2.0的基础.HTTP/2 基于 SPDY 而建，性能和特性较 HTTP/1.1 有了极大的提升.</p>
</blockquote>
<h3 id="HTTP2_VS_SPDY">HTTP2 VS SPDY</h3><ul>
<li><a href="http://blog.chromium.org/2015/02/hello-http2-goodbye-spdy-http-is_9.html">Chromium Blog: Hello HTTP/2, Goodbye SPDY</a></li>
<li><a href="https://blogs.akamai.com/2014/01/spdy-http-2.html">SPDY &amp; HTTP 2 - The Akamai Blog</a></li>
<li><a href="http://www.qianduan.net/a-simple-performance-comparison-of-https-spdy-and-http2/">HTTPS, SPDY和 HTTP/2性能的简单对比</a></li>
</ul>]]>
    
    </summary>
    
      <category term="HTTP2" scheme="http://qunwang6.github.io/blog/tags/HTTP2/"/>
    
      <category term="HTTP2" scheme="http://qunwang6.github.io/blog/categories/HTTP2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift Style guide]]></title>
    <link href="http://qunwang6.github.io/blog/SwiftStyleGuide/"/>
    <id>http://qunwang6.github.io/blog/SwiftStyleGuide/</id>
    <published>2015-05-25T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:33.000Z</updated>
    <content type="html"><![CDATA[<p>A guide to our Swift style and conventions.</p>
<p>This is an attempt to encourage patterns that accomplish the following goals (in<br>rough priority order):</p>
<ol>
<li>Increased rigor, and decreased likelihood of programmer error</li>
<li>Increased clarity of intent</li>
<li>Reduced verbosity</li>
<li>Fewer debates about aesthetics</li>
</ol>
<p>If you have suggestions, please see our <a href="CONTRIBUTING.md">contribution guidelines</a>,<br>then open a pull request. :zap:</p>
<hr>
<h4 id="Whitespace">Whitespace</h4><ul>
<li>Tabs, not spaces.</li>
<li>End files with a newline.</li>
<li>Make liberal use of vertical whitespace to divide code into logical chunks.</li>
<li>Don’t leave trailing whitespace.<ul>
<li>Not even leading indentation on blank lines.</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h4 id="Prefer_let-bindings_over_var-bindings_wherever_possible">Prefer <code>let</code>-bindings over <code>var</code>-bindings wherever possible</h4><p>Use <code>let foo = …</code> over <code>var foo = …</code> wherever possible (and when in doubt). Only use <code>var</code> if you absolutely have to (i.e. you <em>know</em> that the value might change, e.g. when using the <code>weak</code> storage modifier).</p>
<p><em>Rationale:</em> The intent and meaning of both keywords is clear, but <em>let-by-default</em> results in safer and clearer code.</p>
<p>A <code>let</code>-binding guarantees and <em>clearly signals to the programmer</em> that its value is supposed to and will never change. Subsequent code can thus make stronger assumptions about its usage.</p>
<p>It becomes easier to reason about code. Had you used <code>var</code> while still making the assumption that the value never changed, you would have to manually check that.</p>
<p>Accordingly, whenever you see a <code>var</code> identifier being used, assume that it will change and ask yourself why.</p>
<h4 id="Avoid_Using_Force-Unwrapping_of_Optionals">Avoid Using Force-Unwrapping of Optionals</h4><p>If you have an identifier <code>foo</code> of type <code>FooType?</code> or <code>FooType!</code>, don’t force-unwrap it to get to the underlying value (<code>foo!</code>) if possible.</p>
<p>Instead, prefer this:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> foo = foo &#123;</span><br><span class="line">    <span class="comment">// Use unwrapped `foo` value in here</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// If appropriate, handle the case where the optional is nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Alternatively, you might want to use Swift’s Optional Chaining in some of these cases, such as:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Call the function if `foo` is not nil. If `foo` is nil, ignore we ever tried to make the call</span></span><br><span class="line">foo?.callSomethingIfFooIsNotNil()</span><br></pre></td></tr></table></figure>
<p><em>Rationale:</em> Explicit <code>if let</code>-binding of optionals results in safer code. Force unwrapping is more prone to lead to runtime crashes.</p>
<h4 id="Avoid_Using_Implicitly_Unwrapped_Optionals">Avoid Using Implicitly Unwrapped Optionals</h4><p>Where possible, use <code>let foo: FooType?</code> instead of <code>let foo: FooType!</code> if <code>foo</code> may be nil (Note that in general, <code>?</code> can be used instead of <code>!</code>).</p>
<p><em>Rationale:</em> Explicit optionals result in safer code. Implicitly unwrapped optionals have the potential of crashing at runtime.</p>
<h4 id="Prefer_implicit_getters_on_read-only_properties_and_subscripts">Prefer implicit getters on read-only properties and subscripts</h4><p>When possible, omit the <code>get</code> keyword on read-only computed properties and<br>read-only subscripts.</p>
<p>So, write these:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myGreatProperty: <span class="type">Int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> objects[index]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>… not these:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myGreatProperty: <span class="type">Int</span> &#123;</span><br><span class="line">	<span class="keyword">get</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> objects[index]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Rationale:</em> The intent and meaning of the first version is clear, and results in less code.</p>
<h4 id="Always_specify_access_control_explicitly_for_top-level_definitions">Always specify access control explicitly for top-level definitions</h4><p>Top-level functions, types, and variables should always have explicit access control specifiers:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">var</span> whoopsGlobalState: <span class="type">Int</span></span><br><span class="line">internal <span class="class"><span class="keyword">struct</span> <span class="title">TheFez</span> </span>&#123;&#125;</span><br><span class="line">private <span class="func"><span class="keyword">func</span> <span class="title">doTheThings</span><span class="params">(things: [Thing])</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>However, definitions within those can leave access control implicit, where appropriate:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">internal <span class="class"><span class="keyword">struct</span> <span class="title">TheFez</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> owner: <span class="type">Person</span> = <span class="type">Joshaber</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Rationale:</em> It’s rarely appropriate for top-level definitions to be specifically <code>internal</code>, and being explicit ensures that careful thought goes into that decision. Within a definition, reusing the same access control specifier is just duplicative, and the default is usually reasonable.</p>
<h4 id="When_specifying_a_type,_always_associate_the_colon_with_the_identifier">When specifying a type, always associate the colon with the identifier</h4><p>When specifying the type of an identifier, always put the colon immediately<br>after the identifier, followed by a space and then the type name.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallBatchSustainableFairtrade</span>: <span class="title">Coffee</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timeToCoffee: <span class="type">NSTimeInterval</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">makeCoffee</span><span class="params">(type: CoffeeType)</span></span> -&gt; <span class="type">Coffee</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p><em>Rationale:</em> The type specifier is saying something about the <em>identifier</em> so<br>it should be positioned with it.</p>
<p>Also, when specifying the type of a dictionary, always put the colon immediately<br>after the key type, followed by a space and then the value type.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> capitals: [<span class="type">Country</span>: <span class="type">City</span>] = [ <span class="type">Sweden</span>: <span class="type">Stockholm</span> ]</span><br></pre></td></tr></table></figure>
<h4 id="Only_explicitly_refer_to_self_when_required">Only explicitly refer to <code>self</code> when required</h4><p>When accessing properties or methods on <code>self</code>, leave the reference to <code>self</code> implicit by default:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">private <span class="class"><span class="keyword">class</span> <span class="title">History</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> events: [<span class="type">Event</span>]</span><br><span class="line"></span><br><span class="line">	<span class="func"><span class="keyword">func</span> <span class="title">rewrite</span><span class="params">()</span></span> &#123;</span><br><span class="line">		events = []</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Only include the explicit keyword when required by the language—for example, in a closure, or when parameter names conflict:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">History</span> </span>&#123;</span><br><span class="line">	<span class="keyword">init</span>(events: [<span class="type">Event</span>]) &#123;</span><br><span class="line">		<span class="keyword">self</span>.events = events</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> whenVictorious: () -&gt; () &#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			<span class="keyword">self</span>.rewrite()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Rationale:</em> This makes the capturing semantics of <code>self</code> stand out more in closures, and avoids verbosity elsewhere.</p>
<h4 id="Prefer_structs_over_classes">Prefer structs over classes</h4><p>Unless you require functionality that can only be provided by a class (like identity or deinitializers), implement a struct instead.</p>
<p>Note that inheritance is (by itself) usually <em>not</em> a good reason to use classes, because polymorphism can be provided by protocols, and implementation reuse can be provided through composition.</p>
<p>For example, this class hierarchy:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> numberOfWheels: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(numberOfWheels: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.numberOfWheels = numberOfWheels</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">maximumTotalTirePressure</span><span class="params">(pressurePerWheel: Float)</span></span> -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pressurePerWheel * numberOfWheels</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span>: <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(numberOfWheels: <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>: <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(numberOfWheels: <span class="number">4</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>could be refactored into these definitions:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">maximumTotalTirePressure</span><span class="params">(vehicle: Vehicle, pressurePerWheel: Float)</span></span> -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pressurePerWheel * vehicle.numberOfWheels</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bicycle</span>: <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> numberOfWheels = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Car</span>: <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> numberOfWheels = <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Rationale:</em> Value types are simpler, easier to reason about, and behave as expected with the <code>let</code> keyword.</p>
<h4 id="Make_classes_final_by_default">Make classes <code>final</code> by default</h4><p>Classes should start as <code>final</code>, and only be changed to allow subclassing if a valid need for inheritance has been identified. Even in that case, as many definitions as possible <em>within</em> the class should be <code>final</code> as well, following the same rules.</p>
<p><em>Rationale:</em> Composition is usually preferable to inheritance, and opting <em>in</em> to inheritance hopefully means that more thought will be put into the decision.</p>
<h4 id="Omit_type_parameters_where_possible">Omit type parameters where possible</h4><p>Methods of parameterized types can omit type parameters on the receiving type when they’re identical to the receiver’s. For example:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Composite</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	…</span><br><span class="line">	<span class="func"><span class="keyword">func</span> <span class="title">compose</span><span class="params">(other: Composite&lt;T&gt;)</span></span> -&gt; <span class="type">Composite</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">Composite</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">self</span>, other)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>could be rendered as:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Composite</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	…</span><br><span class="line">	<span class="func"><span class="keyword">func</span> <span class="title">compose</span><span class="params">(other: Composite)</span></span> -&gt; <span class="type">Composite</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">Composite</span>(<span class="keyword">self</span>, other)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Rationale:</em> Omitting redundant type parameters clarifies the intent, and makes it obvious by contrast when the returned type takes different type parameters.</p>
<h4 id="Use_whitespace_around_operator_definitions">Use whitespace around operator definitions</h4><p>Use whitespace around operators when defining them. Instead of:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="generics">&lt;|(lhs: Int, rhs: Int) -&gt;</span> <span class="title">Int</span></span><br><span class="line"><span class="title">func</span> <span class="generics">&lt;|&lt;&lt;A&gt;</span><span class="params">(lhs: A, rhs: A)</span></span> -&gt; <span class="type">A</span></span><br></pre></td></tr></table></figure>
<p>write:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="generics">&lt;| (lhs: Int, rhs: Int) -&gt;</span> <span class="title">Int</span></span><br><span class="line"><span class="title">func</span> <span class="generics">&lt;|&lt; &lt;A&gt;</span><span class="params">(lhs: A, rhs: A)</span></span> -&gt; <span class="type">A</span></span><br></pre></td></tr></table></figure>
<p><em>Rationale:</em> Operators consist of punctuation characters, which can make them difficult to read when immediately followed by the punctuation for a type or value parameter list. Adding whitespace separates the two more clearly.</p>
<h4 id="Translations">Translations</h4><ul>
<li><a href="https://github.com/Artwalk/swift-style-guide/blob/master/README_CN.md" target="_blank" rel="external">中文版</a></li>
<li><a href="https://github.com/jarinosuke/swift-style-guide/blob/master/README_JP.md" target="_blank" rel="external">日本語版</a></li>
</ul>
<hr>
<p>Reference:<a href="https://github.com/github/swift-style-guide" target="_blank" rel="external">Swift Style guide</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>A guide to our Swift style and conventions.</p>
<p>This is an attempt to encourage patterns that accomplish the following goals (in<br>rough priority order):</p>
<ol>
<li>Increased rigor, and decreased likelihood of programmer error</li>
<li>Increased clarity of intent</li>
<li>Reduced verbosity</li>
<li>Fewer debates about aesthetics</li>
</ol>
<p>If you have suggestions, please see our <a href="CONTRIBUTING.md">contribution guidelines</a>,<br>then open a pull request. :zap:</p>
<hr>
<h4 id="Whitespace">Whitespace</h4><ul>
<li>Tabs, not spaces.</li>
<li>End files with a newline.</li>
<li>Make liberal use of vertical whitespace to divide code into logical chunks.</li>
<li>Don’t leave trailing whitespace.<ul>
<li>Not even leading indentation on blank lines.</li>
</ul>
</li>
</ul>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://qunwang6.github.io/blog/tags/Swift/"/>
    
      <category term="Swift" scheme="http://qunwang6.github.io/blog/categories/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GFW]]></title>
    <link href="http://qunwang6.github.io/blog/GFW/"/>
    <id>http://qunwang6.github.io/blog/GFW/</id>
    <published>2015-05-23T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:51.000Z</updated>
    <content type="html"><![CDATA[<h3 id="更改系统host">更改系统host</h3><p>寻找可用ip,修改系统host<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//www.findspace.name/adds/hosts2</span></span><br></pre></td></tr></table></figure></p>
<h3 id="更改网络DNS">更改网络DNS</h3><ul>
<li><p>Hello DNS (可直接翻墙)</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">DNS1</span>: <span class="string">123.56.46.123</span></span><br><span class="line"><span class="attribute">DNS2</span>: <span class="string">182.254.185.148</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="http://dns.yc.is/" target="_blank" rel="external">任我行DNS</a>(可直接翻墙)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">121.201.13.176</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><a href="https://github.com/openervpn/openerdns" target="_blank" rel="external">OpenerDNS</a>(可直接翻墙,已被封)</li>
<li>以下DNS可加速网络访问速度<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="title">OpenDns</span></span><br><span class="line"><span class="number">208.67.222.222</span></span><br><span class="line"><span class="number">208.67.220.220</span></span><br><span class="line">阿里巴巴DNS</span><br><span class="line"><span class="number">223.5.5.5</span></span><br><span class="line"><span class="number">223.6.6.6</span></span><br><span class="line">国内的<span class="number">114.114.114.114</span>，</span><br><span class="line">国外Google的<span class="number">8.8.8.8</span></span><br><span class="line">CNNIC公共云解析服务（SDNS）地址为：</span><br><span class="line">首选DNS服务器：<span class="number">1.2.4.8</span></span><br><span class="line">备用DNS服务器：<span class="number">210.2.4.8</span></span><br><span class="line">V2EX DNS</span><br><span class="line"><span class="number">199.91.73.222</span></span><br><span class="line"><span class="number">178.79.131.110</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="自建DNS服务器">自建DNS服务器</h3><ul>
<li>在自己的电脑里建立DNS服务器，比较麻烦，待续。。。</li>
</ul>
<h3 id="用pac翻墙">用pac翻墙</h3><p>推荐: <a href="https://www.ftq.me/" target="_blank" rel="external">佛跳墙</a></p>
<h3 id="反向代理">反向代理</h3><ul>
<li>在未被封锁的云端服务器上建立代理服务，通过代理服务器访问被封锁的网站</li>
</ul>
<h3 id="代理软件">代理软件</h3><p>最常用，最简单，最后写重点介绍。</p>
<ul>
<li><p><a href="http://shadowsocks.org/en/download/clients.html" target="_blank" rel="external">ShadowSocks</a><br><strong> shadowsocks账号免费获取 </strong><br><a href="https://free.gfw.im/code.php" target="_blank" rel="external">潜形匿影</a><br><a href="http://miaoss.pw/login.php" target="_blank" rel="external">Xmiao</a><br><a href="https://ssnode.com/user/index.php" target="_blank" rel="external">ssnode</a><br><a href="https://www.v2ex.com/go/shadowsocks" target="_blank" rel="external">v2ex论坛关注账号分享</a></p>
</li>
<li><p><a href="https://arnaud.sinaapp.com/" target="_blank" rel="external">Arnaud’s 公共 ShadowSocks 共享计划</a>(获取账号需要点智商)</p>
</li>
</ul>
<ul>
<li><a href="https://www.uproxy.org/" target="_blank" rel="external">uproxy</a><blockquote>
<p>Google资助开发的P2P代理软件,开放测试中，目前软件还只是 alpha版本，只支持Chrome和Firefox。uProxy是一个浏览器扩展，能将所有浏览器的流量重定向通过第三方计算机，它不像VPN那样依赖于专用代理服务器，而是在你和朋友之间通过点对点连接建立个人VPN服务。如果你身处一个有防火墙的国家，而你的朋友生活在一个无防火墙的自由国度，那么你可以与朋友建立连接通过对方的网络冲浪，绕过屏蔽。uProxyu是基于WebRTC技术的实现，由华盛顿大学开发，得到了 Google Ideas的资助。</p>
</blockquote>
</li>
<li><p><a href="https://chrome.google.com/webstore/detail/%E6%97%B6%E7%A9%BA%E9%9A%A7%E9%81%93/hfinpallhogllbckokkaefjjcjhjpnln/reviews?utm_source=chrome-ntp-icon" target="_blank" rel="external">时空隧道</a><br>Google Chrome翻墙插件<br><a href="https://chrome.google.com/webstore/detail/hfinpallhogllbckokkaefjjcjhjpnln" target="_blank" rel="external">国外网址</a><br><a href="http://www.suidao.in/invi/PuGbvk" target="_blank" rel="external">国内网址</a><br>时空隧道邀请码 PuGbvk</p>
<p>待续。。。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="更改系统host">更改系统host</h3><p>寻找可用ip,修改系统host<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//www.findspace.name/adds/hosts2</span></span><br></pre></td></tr></table></figure></p>
<h3 id="更改网络DNS">更改网络DNS</h3><ul>
<li><p>Hello DNS (可直接翻墙)</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">DNS1</span>: <span class="string">123.56.46.123</span></span><br><span class="line"><span class="attribute">DNS2</span>: <span class="string">182.254.185.148</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="http://dns.yc.is/">任我行DNS</a>(可直接翻墙)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">121.201.13.176</span><br></pre></td></tr></table></figure>
</li>
</ul>]]>
    
    </summary>
    
      <category term="DNS" scheme="http://qunwang6.github.io/blog/tags/DNS/"/>
    
      <category term="GFW" scheme="http://qunwang6.github.io/blog/tags/GFW/"/>
    
      <category term="host" scheme="http://qunwang6.github.io/blog/tags/host/"/>
    
      <category term="GFW" scheme="http://qunwang6.github.io/blog/categories/GFW/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sublime 3笔记]]></title>
    <link href="http://qunwang6.github.io/blog/sublime/"/>
    <id>http://qunwang6.github.io/blog/sublime/</id>
    <published>2015-05-22T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Package_Control">Package Control</h2><p><a href="https://packagecontrol.io/installation#st3" target="_blank" rel="external">Package Control</a></p>
<hr>
<h2 id="自动换行">自动换行</h2><p>1、打开 Preferences -&gt; Setting - User（设置 - 用户）</p>
<p>2、在最后一个花括号（即“｝”）前添加如下内容即可：</p>
<blockquote>
<p>“word_wrap” : true</p>
</blockquote>
<p>//上一行要加入<code>,</code>号</p>
<hr>
<h2 id="evernote">evernote</h2><p><a href="https://github.com/bordaigorl/sublime-evernote" target="_blank" rel="external">sublime-evernote</a><br>keymap复制到Preferences -&gt;key Bindings user</p>
<a id="more"></a>
<hr>
<h2 id="编码">编码</h2><p>ConvertToUTF8<br>Codecs33</p>
<hr>
<h2 id="网页编辑实时更新">网页编辑实时更新</h2><p><a href="http://livestyle.emmet.io/install/" target="_blank" rel="external">Emmet LiveStyle</a><br>Sublime和浏览器都要安装插件</p>
<ul>
<li>sublime 搜索livestyle安装后重启</li>
<li>Google Chrome 安装扩展重启</li>
<li>Google Chrome 打开开发者工具，找到livestyle启用，每次都要打开<br><img src="http://livestyle.emmet.io/-/628467848/i/chrome-ext.png" alt=""></li>
</ul>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Package_Control">Package Control</h2><p><a href="https://packagecontrol.io/installation#st3">Package Control</a></p>
<hr>
<h2 id="自动换行">自动换行</h2><p>1、打开 Preferences -&gt; Setting - User（设置 - 用户）</p>
<p>2、在最后一个花括号（即“｝”）前添加如下内容即可：</p>
<blockquote>
<p>“word_wrap” : true</p>
</blockquote>
<p>//上一行要加入<code>,</code>号</p>
<hr>
<h2 id="evernote">evernote</h2><p><a href="https://github.com/bordaigorl/sublime-evernote">sublime-evernote</a><br>keymap复制到Preferences -&gt;key Bindings user</p>]]>
    
    </summary>
    
      <category term="Sublime" scheme="http://qunwang6.github.io/blog/tags/Sublime/"/>
    
      <category term="Sublime" scheme="http://qunwang6.github.io/blog/categories/Sublime/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Avengers Card with 3D rotation and neon effect]]></title>
    <link href="http://qunwang6.github.io/blog/CSS3D/"/>
    <id>http://qunwang6.github.io/blog/CSS3D/</id>
    <published>2015-05-16T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:52.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/iCBLZco.gif" alt=""></p>
<blockquote>
<p>Avengers assemble an SVG scalable logo!<br>Sort of virtual hologram Marvel Avengers card with 3D rotate animation, SVG scalable Avengers logo and Iron Man colors (red and gold) and a nice neon effect.<br>Pure CSS and an SVG Avengers logo.</p>
</blockquote>
<h3 id="HTML">HTML</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="tag">div</span> class=<span class="string">"card animate"</span>&gt;</span><br><span class="line">&lt;<span class="tag">img</span> src=<span class="string">"//upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Symbol_from_Marvel%27s_The_Avengers_logo.svg/191px-Symbol_from_Marvel%27s_The_Avengers_logo.svg.png"</span> <span class="attribute">width</span>=<span class="string">"191"</span> <span class="attribute">height</span>=<span class="string">"223"</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="CSS">CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="tag">html</span>,<span class="tag">body</span><span class="rules">&#123;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#252527</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#fff</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line"></span><br><span class="line"><span class="rule"><span class="attribute">display</span>:<span class="value">block</span></span>;<span class="rule"><span class="attribute">overflow</span>:<span class="value">hidden</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">100%</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">100%</span></span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span></span><br><span class="line"><span class="tag">img</span><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value">block</span></span>;</span><br><span class="line"><span class="comment">/*</span><br><span class="line">  width:191px;height:223px;</span><br><span class="line">  */</span></span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#fff</span></span></span>;<span class="rule"><span class="attribute">background</span>:<span class="value">transparent</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> auto</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.animate</span><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">animation</span>:<span class="value">spin <span class="number">4s</span> linear infinite</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-animation</span>:<span class="value">spin <span class="number">4s</span> linear infinite</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-moz-animation</span>:<span class="value">spin <span class="number">4s</span> linear infinite</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-o-animation</span>:<span class="value">spin <span class="number">4s</span> linear infinite</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-ms-animation</span>:<span class="value">spin <span class="number">4s</span> linear infinite</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">keyframes</span> spin </span>&#123; 100% <span class="rules">&#123; <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotateY</span>(<span class="number">360deg</span>)</span></span>; &#125;</span> &#125;</span><br><span class="line"><span class="at_rule">@<span class="keyword">-webkit-keyframes</span> spin </span>&#123; 100% <span class="rules">&#123; <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">rotateY</span>(<span class="number">360deg</span>)</span></span>; &#125;</span> &#125;</span><br><span class="line"><span class="at_rule">@<span class="keyword">-moz-keyframes</span> spin </span>&#123; 100% <span class="rules">&#123; <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"> <span class="function">rotateY</span>(<span class="number">360deg</span>)</span></span>; &#125;</span> &#125;</span><br><span class="line"><span class="at_rule">@<span class="keyword">-o-keyframes</span> spin </span>&#123; 100% <span class="rules">&#123; <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotateY</span>(<span class="number">360deg</span>)</span></span>; &#125;</span> &#125;</span><br><span class="line"><span class="at_rule">@<span class="keyword">-ms-keyframes</span> spin </span>&#123; 100% <span class="rules">&#123; <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotateY</span>(<span class="number">360deg</span>)</span></span>; &#125;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.card</span><span class="rules">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;<span class="rule"><span class="attribute">max-width</span>:<span class="value"><span class="number">150px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> auto</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">30%</span> auto</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">20%</span> <span class="number">10%</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border-radius</span>:<span class="value"><span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#ED1C24</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">rgb</span>(<span class="number">180</span>,<span class="number">112</span>,<span class="number">107</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">-moz-linear-gradient</span>(top,  <span class="function">rgba</span>(<span class="number">180</span>,<span class="number">112</span>,<span class="number">107</span>,<span class="number">1</span>) <span class="number">0%</span>, <span class="function">rgba</span>(<span class="number">144</span>,<span class="number">53</span>,<span class="number">39</span>,<span class="number">1</span>) <span class="number">100%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">-webkit-gradient</span>(linear, left top, left bottom, <span class="function">color-stop</span>(<span class="number">0%</span>,<span class="function">rgba</span>(<span class="number">180</span>,<span class="number">112</span>,<span class="number">107</span>,<span class="number">1</span>)), <span class="function">color-stop</span>(<span class="number">100%</span>,<span class="function">rgba</span>(<span class="number">144</span>,<span class="number">53</span>,<span class="number">39</span>,<span class="number">1</span>)))</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">-webkit-linear-gradient</span>(top,  <span class="function">rgba</span>(<span class="number">180</span>,<span class="number">112</span>,<span class="number">107</span>,<span class="number">1</span>) <span class="number">0%</span>,<span class="function">rgba</span>(<span class="number">144</span>,<span class="number">53</span>,<span class="number">39</span>,<span class="number">1</span>) <span class="number">100%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">-o-linear-gradient</span>(top,  <span class="function">rgba</span>(<span class="number">180</span>,<span class="number">112</span>,<span class="number">107</span>,<span class="number">1</span>) <span class="number">0%</span>,<span class="function">rgba</span>(<span class="number">144</span>,<span class="number">53</span>,<span class="number">39</span>,<span class="number">1</span>) <span class="number">100%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">-ms-linear-gradient</span>(top,  <span class="function">rgba</span>(<span class="number">180</span>,<span class="number">112</span>,<span class="number">107</span>,<span class="number">1</span>) <span class="number">0%</span>,<span class="function">rgba</span>(<span class="number">144</span>,<span class="number">53</span>,<span class="number">39</span>,<span class="number">1</span>) <span class="number">100%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(to bottom,  <span class="function">rgba</span>(<span class="number">180</span>,<span class="number">112</span>,<span class="number">107</span>,<span class="number">1</span>) <span class="number">0%</span>,<span class="function">rgba</span>(<span class="number">144</span>,<span class="number">53</span>,<span class="number">39</span>,<span class="number">1</span>) <span class="number">100%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">filter</span>:<span class="value"> progid:DXImageTransform.Microsoft.<span class="function">gradient</span>( startColorstr=<span class="string">'#b4706b'</span>, endColorstr=<span class="string">'#903527'</span>,GradientType=<span class="number">0</span> )</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">opacity</span>:<span class="value"><span class="number">0.75</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">transform-style</span>:<span class="value"> preserve-<span class="number">3</span>d</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-webkit-transform-style</span>:<span class="value"> preserve-<span class="number">3</span>d</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-moz-transform-style</span>:<span class="value"> preserve-<span class="number">3</span>d</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-o-transform-style</span>:<span class="value"> preserve-<span class="number">3</span>d</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-ms-transform-style</span>:<span class="value"> preserve-<span class="number">3</span>d</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">5px</span> solid <span class="hexcolor">#D8C160</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span> <span class="hexcolor">#EEE5CD</span></span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">body</span><span class="rules">&#123;</span><br><span class="line"></span><br><span class="line"><span class="rule"><span class="attribute">perspective-origin</span>:<span class="value"> <span class="number">0%</span> <span class="number">0%</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-webkit-perspective-origin</span>:<span class="value"> <span class="number">0%</span> <span class="number">0%</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-moz-perspective-origin</span>:<span class="value"> <span class="number">0%</span> <span class="number">0%</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-o-perspective-origin</span>:<span class="value"> <span class="number">0%</span> <span class="number">0%</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-ms-perspective-origin</span>:<span class="value"> <span class="number">0%</span> <span class="number">0%</span></span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="rule"><span class="attribute">perspective</span>:<span class="value"> <span class="number">1200px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-webkit-perspective</span>:<span class="value"> <span class="number">1200px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-moz-perspective</span>:<span class="value"> <span class="number">2800px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-o-perspective</span>:<span class="value"> <span class="number">1200px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-ms-perspective</span>:<span class="value"> <span class="number">1200px</span></span></span>;</span><br><span class="line"></span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">repeating-linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#2b2b2b</span> <span class="number">0%</span>, <span class="hexcolor">#2b2b2b</span> <span class="number">10%</span>, <span class="hexcolor">#222222</span> <span class="number">0%</span>, <span class="hexcolor">#222222</span> <span class="number">50%</span>) <span class="number">0</span> / <span class="number">10px</span> <span class="number">10px</span></span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="References:">References:</h3><p><a href="http://andreapaiola.name/2015-05-css-avengers/" target="_blank" rel="external">http://andreapaiola.name/2015-05-css-avengers/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i.imgur.com/iCBLZco.gif" alt=""></p>
<blockquote>
<p>Avengers assemble an SVG scalable logo!<br>Sort of virtual hologram Marvel Avengers card with 3D rotate animation, SVG scalable Avengers logo and Iron Man colors (red and gold) and a nice neon effect.<br>Pure CSS and an SVG Avengers logo.</p>
</blockquote>
<h3 id="HTML">HTML</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="tag">div</span> class=<span class="string">"card animate"</span>&gt;</span><br><span class="line">&lt;<span class="tag">img</span> src=<span class="string">"//upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Symbol_from_Marvel%27s_The_Avengers_logo.svg/191px-Symbol_from_Marvel%27s_The_Avengers_logo.svg.png"</span> <span class="attribute">width</span>=<span class="string">"191"</span> <span class="attribute">height</span>=<span class="string">"223"</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://qunwang6.github.io/blog/tags/CSS/"/>
    
      <category term="CSS" scheme="http://qunwang6.github.io/blog/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SpaceMonkey]]></title>
    <link href="http://qunwang6.github.io/blog/SpaceMonkey/"/>
    <id>http://qunwang6.github.io/blog/SpaceMonkey/</id>
    <published>2015-05-16T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="项目">项目</h3><p><a href="http://www.raywenderlich.com/94649/sprite-kit-kids-swift" target="_blank" rel="external">Sprite Kit for Kids with Swift </a></p>
<h3 id="编译错误">编译错误</h3><p>编译环境：<br>Xcode Version 6.2 (6C131e)<br>OS X 10.9.5<br><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">override func viewWillLayoutSubviews() &#123;</span><br><span class="line">    super.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">skView =</span> self.view as! SKView</span><br><span class="line">    <span class="keyword">if</span> skView.<span class="variable">scene =</span>= nil &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> <span class="variable">scene =</span> GameScene(size:skView.frame.size)</span><br><span class="line">      skView.<span class="variable">showsFPS =</span> <span class="constant">true</span></span><br><span class="line">      skView.<span class="variable">showsNodeCount =</span> <span class="constant">true</span></span><br><span class="line">      skView.<span class="variable">showsPhysics =</span> <span class="constant">true</span></span><br><span class="line">      skView.<span class="variable">ignoresSiblingOrder =</span> <span class="constant">true</span></span><br><span class="line">      scene.<span class="variable">scaleMode =</span> .AspectFill</span><br><span class="line">      skView.presentScene(scene)</span><br><span class="line"></span><br><span class="line">      playBackgroundMusic(<span class="string">"BackgroundMusic.mp3"</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>错误信息</p>
<blockquote>
<p>Expected type after ‘as’</p>
</blockquote>
<a id="more"></a>
<p>解决方法<br><code>as!</code>===&gt;<code>as</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(touches: Set&lt;NSObject&gt;, withEvent event: UIEvent)</span></span> &#123;</span><br><span class="line">  <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">if</span> (!gameOver) &#123;</span><br><span class="line">    <span class="keyword">if</span> player.physicsBody?.dynamic == <span class="built_in">false</span> &#123;</span><br><span class="line">      player.physicsBody?.dynamic = <span class="built_in">true</span></span><br><span class="line">      touchToBeginLabel.hidden = <span class="built_in">true</span></span><br><span class="line">      backgroundColor = <span class="type">SKColor</span>.blackColor()</span><br><span class="line"></span><br><span class="line">      runAction(<span class="type">SKAction</span>.repeatActionForever(</span><br><span class="line">        <span class="type">SKAction</span>.sequence([</span><br><span class="line">          <span class="type">SKAction</span>.runBlock(spawnEnemy),</span><br><span class="line">          <span class="type">SKAction</span>.waitForDuration(<span class="number">1.0</span>)])))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    jumpPlayer()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (gameOver) &#123;</span><br><span class="line">    <span class="keyword">let</span> newScene = <span class="type">GameScene</span>(size: size)</span><br><span class="line">    newScene.scaleMode = scaleMode</span><br><span class="line">    <span class="keyword">let</span> reveal = <span class="type">SKTransition</span>.flipHorizontalWithDuration(<span class="number">0.5</span>)</span><br><span class="line">    view?.presentScene(newScene, transition: reveal)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>错误信息</p>
<blockquote>
<p>Use of undeclared type ‘Set’</p>
</blockquote>
<p>解决方法<br><code>Set&lt;NSObject&gt;</code>===&gt;<code>NSObject</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="项目">项目</h3><p><a href="http://www.raywenderlich.com/94649/sprite-kit-kids-swift">Sprite Kit for Kids with Swift </a></p>
<h3 id="编译错误">编译错误</h3><p>编译环境：<br>Xcode Version 6.2 (6C131e)<br>OS X 10.9.5<br><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">override func viewWillLayoutSubviews() &#123;</span><br><span class="line">    super.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">skView =</span> self.view as! SKView</span><br><span class="line">    <span class="keyword">if</span> skView.<span class="variable">scene =</span>= nil &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> <span class="variable">scene =</span> GameScene(size:skView.frame.size)</span><br><span class="line">      skView.<span class="variable">showsFPS =</span> <span class="constant">true</span></span><br><span class="line">      skView.<span class="variable">showsNodeCount =</span> <span class="constant">true</span></span><br><span class="line">      skView.<span class="variable">showsPhysics =</span> <span class="constant">true</span></span><br><span class="line">      skView.<span class="variable">ignoresSiblingOrder =</span> <span class="constant">true</span></span><br><span class="line">      scene.<span class="variable">scaleMode =</span> .AspectFill</span><br><span class="line">      skView.presentScene(scene)</span><br><span class="line"></span><br><span class="line">      playBackgroundMusic(<span class="string">"BackgroundMusic.mp3"</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>错误信息</p>
<blockquote>
<p>Expected type after ‘as’</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://qunwang6.github.io/blog/tags/Swift/"/>
    
      <category term="debug" scheme="http://qunwang6.github.io/blog/tags/debug/"/>
    
      <category term="Swift" scheme="http://qunwang6.github.io/blog/categories/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Secret code in Ex Machina]]></title>
    <link href="http://qunwang6.github.io/blog/ExMachina/"/>
    <id>http://qunwang6.github.io/blog/ExMachina/</id>
    <published>2015-05-16T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:52.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/C44iJeR.jpg" alt=""></p>
<h3 id="Code">Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#BlueBook code decryption</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sieve</span><span class="params">(n)</span>:</span></span><br><span class="line">    x = [<span class="number">1</span>] * n</span><br><span class="line">    x[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n/<span class="number">2</span>):</span><br><span class="line">            j = <span class="number">2</span> * i</span><br><span class="line">            <span class="keyword">while</span> j &lt; n:</span><br><span class="line">                    x[j]=<span class="number">0</span></span><br><span class="line">                    j = j+i</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime</span><span class="params">(n,x)</span>:</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= n:</span><br><span class="line">            <span class="keyword">if</span> x[i] == <span class="number">1</span>:</span><br><span class="line">                    j = j + <span class="number">1</span></span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> i - <span class="number">1</span></span><br><span class="line">x=sieve(<span class="number">10000</span>)</span><br><span class="line">code = [<span class="number">1206</span>,<span class="number">301</span>,<span class="number">384</span>,<span class="number">5</span>]</span><br><span class="line">key =[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,]</span><br><span class="line"></span><br><span class="line">sys.stdout.write(<span class="string">""</span>.join(chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">73</span>,<span class="number">83</span>,<span class="number">66</span>,<span class="number">78</span>,<span class="number">32</span>,<span class="number">61</span>,<span class="number">32</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    sys.stdout.write(str(prime(code[i],x)-key[i]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Which when you run with python2.7 you get the following:</p>
<blockquote>
<p>ISBN = 9780199226559</p>
</blockquote>
<p>Which is <a href="http://www.amazon.com/Embodiment-inner-life-Cognition-Consciousness/dp/0199226555" target="_blank" rel="external">Embodiment and the inner life: Cognition and Consciousness in the Space of Possible Minds</a>. and so now I have a lot more respect for the Director.</p>
<blockquote>
<p>for anyone wondering, the isbn number is generated by concatenating the 1206th 301st 384th and 5th prime number of which each was subtracted 1, 1, 2, 2 …i.e.<br>The 1,206th prime is 9,781. -1<br>The 301st prime is 1,993. -1<br>The 384th prime is 2,657. -2<br>The 5th prime is 11. -2<br>= 9780 1992 2655 9<br>73,83,66,78,32,61,32 are the ascii characters for ‘ISBN = ‘<br>sieve is a reference to <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" target="_blank" rel="external">http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes</a> which is used to reduce the number of prime candidates (here from 1 to 10000).</p>
</blockquote>
<hr>
<h3 id="References:">References:</h3><ul>
<li><a href="http://www.v2ex.com/t/191613#reply37" target="_blank" rel="external">v2ex</a></li>
<li><a href="http://moviecode.tumblr.com/" target="_blank" rel="external">Source Code in TV and Films</a></li>
<li><a href="http://www.reddit.com/r/movies/comments/365f9b/secret_code_in_ex_machina/" target="_blank" rel="external">reddit.com</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i.imgur.com/C44iJeR.jpg" alt=""></p>
<h3 id="Code">Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#BlueBook code decryption</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sieve</span><span class="params">(n)</span>:</span></span><br><span class="line">    x = [<span class="number">1</span>] * n</span><br><span class="line">    x[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n/<span class="number">2</span>):</span><br><span class="line">            j = <span class="number">2</span> * i</span><br><span class="line">            <span class="keyword">while</span> j &lt; n:</span><br><span class="line">                    x[j]=<span class="number">0</span></span><br><span class="line">                    j = j+i</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime</span><span class="params">(n,x)</span>:</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= n:</span><br><span class="line">            <span class="keyword">if</span> x[i] == <span class="number">1</span>:</span><br><span class="line">                    j = j + <span class="number">1</span></span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> i - <span class="number">1</span></span><br><span class="line">x=sieve(<span class="number">10000</span>)</span><br><span class="line">code = [<span class="number">1206</span>,<span class="number">301</span>,<span class="number">384</span>,<span class="number">5</span>]</span><br><span class="line">key =[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,]</span><br><span class="line"></span><br><span class="line">sys.stdout.write(<span class="string">""</span>.join(chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">73</span>,<span class="number">83</span>,<span class="number">66</span>,<span class="number">78</span>,<span class="number">32</span>,<span class="number">61</span>,<span class="number">32</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    sys.stdout.write(str(prime(code[i],x)-key[i]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Python" scheme="http://qunwang6.github.io/blog/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[When is Cheryl’s birthday?]]></title>
    <link href="http://qunwang6.github.io/blog/CherylsBirthday/"/>
    <id>http://qunwang6.github.io/blog/CherylsBirthday/</id>
    <published>2015-05-10T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:54.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://s-media-cache-ak0.pinimg.com/736x/b2/d5/fd/b2d5fd051ed8f6770f765e36fbfbd9c5.jpg" alt="When is Cheryl’s birthday?"></p>
<h3 id="推理">推理</h3><blockquote>
<p>第一句话确定：July 14  July 16  August 14 August 15  August 17(告诉B日期不可能为18，19，==&gt;告诉A的月份不可能为May，June)<br>第二句话确定：July 16 August 15 August 17(日期14有两个，B不可能确定，排除）<br>第三句话确定：July 16（月份August有两个，A不能确定，推出July16)</p>
</blockquote>
<h3 id="Khanacademy"><a href="https://www.khanacademy.org/math/recreational-math/puzzles/brain-teasers/v/cheryls-birthday" target="_blank" rel="external">Khanacademy</a></h3><a id="more"></a>
<p><img src="https://s-media-cache-ak0.pinimg.com/736x/17/05/20/170520d39fc11e6ba74f682709a24cc9.jpg" alt=""></p>
<h3 id="Python">Python</h3><p><a href="http://nbviewer.ipython.org/url/norvig.com/ipython/Cheryl.ipynb#" target="_blank" rel="external"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">DATES = [<span class="string">'May 15'</span>,    <span class="string">'May 16'</span>,    <span class="string">'May 19'</span>,</span><br><span class="line">        <span class="string">'June 17'</span>,   <span class="string">'June 18'</span>,</span><br><span class="line">        <span class="string">'July 14'</span>,   <span class="string">'July 16'</span>,</span><br><span class="line">      <span class="string">'August 14'</span>, <span class="string">'August 15'</span>, <span class="string">'August 17'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Month</span><span class="params">(date)</span>:</span> <span class="keyword">return</span> date.split()[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Day</span><span class="params">(date)</span>:</span>   <span class="keyword">return</span> date.split()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#print Month('May 15')</span></span><br><span class="line"><span class="comment">#out:May</span></span><br><span class="line"><span class="comment">#print Day('May 15')</span></span><br><span class="line"><span class="comment">#out:15</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(part, possible_dates=DATES)</span>:</span></span><br><span class="line">    <span class="string">"Cheryl tells a part of her birthdate to someone; return a new list of possible dates that match the part."</span></span><br><span class="line">    <span class="keyword">return</span> [date <span class="keyword">for</span> date <span class="keyword">in</span> possible_dates <span class="keyword">if</span> part <span class="keyword">in</span> date]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">know</span><span class="params">(possible_dates)</span>:</span></span><br><span class="line">    <span class="string">"A person knows the birthdate if they have exactly one possible date."</span></span><br><span class="line">    <span class="keyword">return</span> len(possible_dates) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print tell('May')</span></span><br><span class="line"><span class="comment">#out:['May 15', 'May 16', 'May 19']</span></span><br><span class="line"><span class="comment">#print tell('15')</span></span><br><span class="line"><span class="comment">#out:['May 15', 'August 15']</span></span><br><span class="line"><span class="comment">#print know(tell('15'))</span></span><br><span class="line"><span class="comment">#out:False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheryls_birthday</span><span class="params">(possible_dates=DATES)</span>:</span></span><br><span class="line">    <span class="string">"Return a list of the possible dates for which statements 3 to 5 are true."</span></span><br><span class="line">    <span class="keyword">return</span> filter(statements3to5, possible_dates)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">statements3to5</span><span class="params">(date)</span>:</span> <span class="keyword">return</span> statement3(date) <span class="keyword">and</span> statement4(date) <span class="keyword">and</span> statement5(date)</span><br><span class="line"></span><br><span class="line"><span class="comment">## TO DO: define statement3, statement4, statement5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">statement3</span><span class="params">(date)</span>:</span></span><br><span class="line">    <span class="string">"Albert: I don't know when Cheryl's birthday is, but I know that Bernard does not know too."</span></span><br><span class="line">    possible_dates = tell(Month(date))</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">not</span> know(possible_dates)</span><br><span class="line">            <span class="keyword">and</span> all(<span class="keyword">not</span> know(tell(Day(d)))</span><br><span class="line">                    <span class="keyword">for</span> d <span class="keyword">in</span> possible_dates))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print statement3('May 15')</span></span><br><span class="line"><span class="comment">#out:False</span></span><br><span class="line"><span class="comment">#print filter(statement3,DATES)</span></span><br><span class="line"><span class="comment">#out:['July 14', 'July 16', 'August 14', 'August 15', 'August 17']</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">statement4</span><span class="params">(date)</span>:</span></span><br><span class="line">    <span class="string">"Bernard: At first I don't know when Cheryl's birthday is, but I know now."</span></span><br><span class="line">    at_first = tell(Day(date))</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">not</span> know(at_first)</span><br><span class="line">            <span class="keyword">and</span> know(filter(statement3, at_first)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print filter(statement4,filter(statement3,DATES))</span></span><br><span class="line"><span class="comment">#out:['July 16', 'August 15', 'August 17']</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">statement5</span><span class="params">(date)</span>:</span></span><br><span class="line">    <span class="string">"Albert: Then I also know when Cheryl's birthday is."</span></span><br><span class="line">    <span class="keyword">return</span> know(filter(statement4, tell(Month(date))))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> cheryls_birthday()</span><br><span class="line"><span class="comment">#out:['July 16']</span></span><br><span class="line"><span class="keyword">print</span> know(cheryls_birthday())</span><br><span class="line"><span class="comment">#out:True</span></span><br></pre></td></tr></table></figure>
<h3 id="Mathematica(1)">Mathematica(1)</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">(*</span><br><span class="line">Procedural answer to the question posted here:</span><br><span class="line"><span class="string">"http://nbviewer.ipython.org/url/norvig.com/ipython/Cheryl.ipynb"</span></span><br><span class="line"></span><br><span class="line">Doing this <span class="keyword">in</span> other fun mathematica ways is left <span class="keyword">as</span> <span class="keyword">an</span> exercise <span class="keyword">for</span> the reader :)</span><br><span class="line"><span class="comment">*)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span>[665]:= str  = "    May 15     May 16     May 19</span><br><span class="line">     June 17    June 18</span><br><span class="line">     July 14    July 16</span><br><span class="line">   August 14  August 15  August 17" ;</span><br><span class="line"></span><br><span class="line">dates = Partition[StringSplit[str], 2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Out</span>[666]= &#123;&#123;<span class="string">"May"</span>, <span class="string">"15"</span>&#125;, &#123;<span class="string">"May"</span>, <span class="string">"16"</span>&#125;, &#123;<span class="string">"May"</span>, <span class="string">"19"</span>&#125;, &#123;<span class="string">"June"</span>,</span><br><span class="line">  <span class="string">"17"</span>&#125;, &#123;<span class="string">"June"</span>, <span class="string">"18"</span>&#125;, &#123;<span class="string">"July"</span>, <span class="string">"14"</span>&#125;, &#123;<span class="string">"July"</span>, <span class="string">"16"</span>&#125;, &#123;<span class="string">"August"</span>,</span><br><span class="line">  <span class="string">"14"</span>&#125;, &#123;<span class="string">"August"</span>, <span class="string">"15"</span>&#125;, &#123;<span class="string">"August"</span>, <span class="string">"17"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">(* 3. albert didn't know when cheryl's birthday was, but</span><br><span class="line">knew bernard didn't know either. <span class="keyword">he</span> has revealed that <span class="keyword">he</span>'s holding a</span><br><span class="line">month that does not permit bernard to immediately know. bernard would</span><br><span class="line">only immediately know <span class="keyword">if</span> the day was unique <span class="keyword">in</span> the <span class="keyword">list</span> *)</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span>[667]:=</span><br><span class="line"></span><br><span class="line">monthsWithUniqueDay =</span><br><span class="line"> GatherBy[dates, Last] <span class="comment">// Select[Length[#] == 1 &amp;] // Catenate //</span></span><br><span class="line">  Map[First]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Out</span>[667]= &#123;<span class="string">"May"</span>, <span class="string">"June"</span>&#125;</span><br><span class="line"></span><br><span class="line">(* 4. bernard reveals his initial day was ambiguous, it</span><br><span class="line">mapped to multiple months *)</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span>[668]:=</span><br><span class="line"></span><br><span class="line">ambiguousDays =</span><br><span class="line">  GatherBy[dates, Last] <span class="comment">// Select[Length[#] &gt; 1 &amp;] // Catenate //</span></span><br><span class="line">    Map[Last] <span class="comment">// Union;</span></span><br><span class="line"></span><br><span class="line">bernardInitial = dates <span class="comment">// Select[MemberQ[ambiguousDays, Last[#] ] &amp;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Out</span>[669]= &#123;&#123;<span class="string">"May"</span>, <span class="string">"15"</span>&#125;, &#123;<span class="string">"May"</span>, <span class="string">"16"</span>&#125;, &#123;<span class="string">"June"</span>, <span class="string">"17"</span>&#125;, &#123;<span class="string">"July"</span>,</span><br><span class="line">  <span class="string">"14"</span>&#125;, &#123;<span class="string">"July"</span>, <span class="string">"16"</span>&#125;, &#123;<span class="string">"August"</span>, <span class="string">"14"</span>&#125;, &#123;<span class="string">"August"</span>,</span><br><span class="line">  <span class="string">"15"</span>&#125;, &#123;<span class="string">"August"</span>, <span class="string">"17"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">(* 4.3 bernard has incorporated albert's information,</span><br><span class="line">ruling <span class="keyword">out</span> any months with unique days *)</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span>[670]:=</span><br><span class="line"></span><br><span class="line">bernardNoUniqueDays =</span><br><span class="line"> bernardInitial <span class="comment">// Select[! MemberQ[monthsWithUniqueDay, First[#]] &amp;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Out</span>[670]= &#123;&#123;<span class="string">"July"</span>, <span class="string">"14"</span>&#125;, &#123;<span class="string">"July"</span>, <span class="string">"16"</span>&#125;, &#123;<span class="string">"August"</span>,</span><br><span class="line">  <span class="string">"14"</span>&#125;, &#123;<span class="string">"August"</span>, <span class="string">"15"</span>&#125;, &#123;<span class="string">"August"</span>, <span class="string">"17"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">(* 4.6 bernard says this is good enough to give him the</span><br><span class="line">answer. <span class="keyword">so</span> what days are potentially unambiguous <span class="keyword">for</span> him, that are</span><br><span class="line">unique day numbers <span class="keyword">in</span> the <span class="keyword">set</span>? *)</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span>[671]:=</span><br><span class="line"></span><br><span class="line">bernardCandidateDays =</span><br><span class="line"> Tally[bernardNoUniqueDays[[All, 2]]] <span class="comment">// Select[Last[#] == 1 &amp;] //</span></span><br><span class="line">  Map[First]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Out</span>[671]= &#123;<span class="string">"16"</span>, <span class="string">"15"</span>, <span class="string">"17"</span>&#125;</span><br><span class="line"></span><br><span class="line">(* since these are the unique day numbers bernard has, we</span><br><span class="line">know the final answer must be <span class="keyword">one</span> of these month/day combinations *)</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span>[672]:=</span><br><span class="line"></span><br><span class="line">bernardCandidateAnswers =</span><br><span class="line"> Select[bernardNoUniqueDays, MemberQ[bernardCandidateDays, Last@#] &amp;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Out</span>[672]= &#123;&#123;<span class="string">"July"</span>, <span class="string">"16"</span>&#125;, &#123;<span class="string">"August"</span>, <span class="string">"15"</span>&#125;, &#123;<span class="string">"August"</span>, <span class="string">"17"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">(* 5. albert says this is good enough to give *him* the answer. <span class="keyword">which</span></span><br><span class="line"><span class="keyword">means</span> albert sees here <span class="keyword">an</span> unambiguous month. What month is</span><br><span class="line">unambiguous <span class="keyword">in</span> this <span class="keyword">set</span>? because that's our answer *)</span><br><span class="line"></span><br><span class="line">Select[</span><br><span class="line"> GatherBy[bernardCandidateAnswers, First], Length[#] == 1 &amp;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Out</span>[673]= &#123;&#123;&#123;<span class="string">"July"</span>, <span class="string">"16"</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mathematica(2)">Mathematica(2)</h3><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">cand = &#123;&#123;"May", <span class="number">15</span>&#125;, &#123;"May", <span class="number">16</span>&#125;, &#123;"May", <span class="number">19</span>&#125;, &#123;"June", <span class="number">17</span>&#125;, &#123;"June",</span><br><span class="line">    <span class="number">18</span>&#125;, &#123;"July", <span class="number">14</span>&#125;, &#123;"July", <span class="number">16</span>&#125;, &#123;"August", <span class="number">14</span>&#125;, &#123;"August",</span><br><span class="line">    <span class="number">15</span>&#125;, &#123;"August", <span class="number">17</span>&#125;&#125;;</span><br><span class="line">c1[n_] :=</span><br><span class="line"> With[&#123;<span class="comment">rem = Cases[Tally[n[[All, 2]]], &#123;x_, _?(# == 1 &amp;)&#125; :&gt; x]&#125;,</span></span><br><span class="line">  DeleteCases[</span><br><span class="line">   n, &#123;Alternatives @@ (Cases[n, &#123;_, Alternatives @@ <span class="comment">rem&#125;][[All,</span></span><br><span class="line">        <span class="number">1</span>]]), _&#125;]]</span><br><span class="line">c2[n_] :=</span><br><span class="line"> With[&#123;<span class="comment">rem = Cases[Tally[n[[All, 2]]], &#123;x_, _?(# == 1 &amp;)&#125; :&gt; x]&#125;,</span></span><br><span class="line">  Cases[n, &#123;_, Alternatives @@ <span class="comment">rem&#125;]]</span></span><br><span class="line">c3[n_] :=</span><br><span class="line"> With[&#123;<span class="comment">rem = Cases[Tally[n[[All, 1]]], &#123;x_, _?(# == 1 &amp;)&#125; :&gt; x]&#125;,</span></span><br><span class="line">  Cases[n, &#123;Alternatives @@ <span class="comment">rem, _&#125;]]</span></span><br><span class="line">Composition[</span><br><span class="line">  Row[&#123;"Cheryl's Birthday is "&#125;~Join~#, Spacer[<span class="number">2</span>]] &amp;, #[[<span class="number">1</span>]] &amp;, c3, c2,</span><br><span class="line">   c1][cand]</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>cand</code> is candidate birthdays<br><code>c1</code> to <code>c3</code> are the clues from the three statements:(i) rule out months that have unique day (ii) rule out birthdays without unique days (iii) find remaining birthday which has unique month the rest is for “prettiness”</p>
</blockquote>
<h3 id="参考">参考</h3><ul>
<li><a href="http://nbviewer.ipython.org/url/norvig.com/ipython/Cheryl.ipynb#" target="_blank" rel="external">python 代码</a></li>
<li><a href="https://www.khanacademy.org/math/recreational-math/puzzles/brain-teasers/v/cheryls-birthday" target="_blank" rel="external">Khanacademy</a></li>
<li><a href="http://mathematica.stackexchange.com/questions/80890/solve-the-cheryls-birthday-puzzle-using-mathematica" target="_blank" rel="external">Mathematica</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://s-media-cache-ak0.pinimg.com/736x/b2/d5/fd/b2d5fd051ed8f6770f765e36fbfbd9c5.jpg" alt="When is Cheryl’s birthday?"></p>
<h3 id="推理">推理</h3><blockquote>
<p>第一句话确定：July 14  July 16  August 14 August 15  August 17(告诉B日期不可能为18，19，==&gt;告诉A的月份不可能为May，June)<br>第二句话确定：July 16 August 15 August 17(日期14有两个，B不可能确定，排除）<br>第三句话确定：July 16（月份August有两个，A不能确定，推出July16)</p>
</blockquote>
<h3 id="Khanacademy"><a href="https://www.khanacademy.org/math/recreational-math/puzzles/brain-teasers/v/cheryls-birthday">Khanacademy</a></h3>]]>
    
    </summary>
    
      <category term="Mathematica" scheme="http://qunwang6.github.io/blog/tags/Mathematica/"/>
    
      <category term="Python" scheme="http://qunwang6.github.io/blog/tags/Python/"/>
    
      <category term="logic" scheme="http://qunwang6.github.io/blog/tags/logic/"/>
    
      <category term="Python" scheme="http://qunwang6.github.io/blog/categories/Python/"/>
    
      <category term="Mathematica" scheme="http://qunwang6.github.io/blog/categories/Python/Mathematica/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Code vs. Poetry]]></title>
    <link href="http://qunwang6.github.io/blog/codeVSpoetry/"/>
    <id>http://qunwang6.github.io/blog/codeVSpoetry/</id>
    <published>2015-05-08T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:53.000Z</updated>
    <content type="html"><![CDATA[<p>David Plotz did an interesting <a href="http://www.slate.com/articles/podcasts/working/2014/12/google_software_engineer_nina_kang_talks_about_the_differences_between_writing.html" target="_blank" rel="external">interview with Google engineer Nina Kang</a> for the <a href="http://www.slate.com/articles/podcasts/working.html" target="_blank" rel="external">Working podcast</a>. Here’s an excerpt (edited for clarity):<br>T:大卫.普拉茲向在Working podcast工作的Google工程师康芯寧做了一次有趣的采访。这是谈话摘录（经过后期编辑润色）:</p>
<p>Q: What is it when you’re writing code that makes particular code really good?<br>T: 是什么让你写特定代码时做得很好？</p>
<p>A: It depends on the situation and the company. Google is a very collaborative company. There were almost a thousand programmers on Google Maps. To my mind, what makes code good is that it is almost anonymous. You shouldn’t be able to read that code and say, oh, Kevin down the hall wrote it. Because if it’s idiosyncratic in that way, it means that it’s not something that’s gonna be so easy for other people to modify. Everyone should write in a uniform enough style within a team that we can easily grasp each other’s code and modify it. And there are a couple of things that I look for when I’m looking at code. One of the things is how few lines would it take for it to be modified. Code that requires a lot of repetition, some people find that poetic, but I find that tedious. […]<br>T: 这要取决于所处的环境和所在的公司。Google是一家特别讲究合作的公司。Google地图的程序员差不多有一千多名。</p>
<p>Q: Great word there, poetic. What does that mean when you say, some people find it poetic?</p>
<p>A: Computer programmers pride ourselves on writing elegant code, or poetic code. But usually what that means is writing code the way the individual programmer thinks is good and that is incredibly subjective. … I think that poetic code is code that you can read [easily]. […]</p>
<p>Q: Will great coders come up with very different solutions to a problem than non-great coders?</p>
<p>A: Absolutely. Great coders come up with solutions that are usually more concise and more easily verified. I think that the key metric is, can someone else read this code and confirm that it works by building a mental model in their head of what the computer’s gonna do at different steps? There are certain things that are really simple, like finding out how many characters are in a line, that you could write in a way that would confuse everybody. But if your code is well written, people understand what it does and they can tell that it works right away.</p>
<p>Q: So elegance, to your mind, corresponds with clarity and concision?</p>
<p>A: Yes, absolutely, just like English.<br><a id="more"></a><br>Q: But in English, as a writer, I pride myself on having a style that is distinctly my own. Do coders, should coders pride themselves on having a style that is distinctly their own or should they pride themselves on having a style which is so clear that it appears to have no style at all.</p>
<p>A: I think a mix of both. I think that if you have a style that’s distinctly your own for good reasons, you’ll find other people who work with you adopting that style and your style would abruptly be less individual. And I think that’s a sign that your style is good. Literature has certain qualities that good code should never have, like deliberate ambiguity, repetition for rhetorical effect, saying things in a slightly different way when you repeat them. I am hard-pressed to think of why that would be good in a team coding setting.</p>
<p>Q: Are you a reader of literature?</p>
<p>A: Yes. I have an MFA in poetry from Warren Wilson.</p>
<p>Q: That’s great. Do you write poetry?</p>
<p>A: Yes.</p>
<p>Q: And when you write poetry and when you write code, are you doing the same thing?</p>
<p>A: My poetry is actually weakened by my coding style and there are certain poetic devices that I have a lot of trouble with using, that I have to deliberately try to force myself to use because they would make for bad coding style. Rhetorical questions, repetition, rhyme, convoluted syntax. It’s so important in poetry to be able to surprise the reader and in coding you can surprise the reader for good effect, but you want to do it through new clarity and new concision. And in poetry the range of things, of emotions you want to give the readers is so much wider than that.</p>
<p>Q: Have you ever read a poet and thought this is like great code?</p>
<p>A: Never. I’ve never read a good poet and thought that.</p>
<p>Q: What do you think you would be doing if you weren’t a coder?</p>
<p>A: I actually took three months off and I wrote an article for Salon. I found writing essays pretty rewarding but not as rewarding as coding. It was just so open-ended and you don’t have that sort of tight collaboration with the computer to validate you. And I did a little yoga and I did gardening. Now pruning and weeding is a lot like coding. Especially maintenance coding in a company like Google.</p>
<p>I have this grapevine and it’s sending out tendrils very aggressively. And the vine might have three different stalks. Each stalk is sending out tendrils almost at random, the tendrils are twining on each other and even though the vine stalks don’t need each other for support, they’ve ended up in this sort of tightly nested space. And that’s actually something that can happen to code, especially in a company as big as Google.</p>
<p>You don’t want to write this one function, you’ll see that someone else on another team wrote a function just like that and you go send out a reference and you link in that function into your own code. Now the other person wants to change their function and suddenly they’re stuck. Yhey can’t change it too much without changing your code, too, and now they have a pickle. The process of untwining those little tendrils and chopping down my stalks felt a lot like what I have to do to decrease other people’s reliance on my code sometimes.</p>
<p>Q: So you’re a woman and you’re a software developer. You obviously work differently than other people because you are a different person than other people. Do you think the fact that you’re a woman has any relevance your working style or what you’re good at?</p>
<p>A: I don’t think there’s anything in me that makes me different from a male programmer. I do think people relate to me differently because I’m a woman. One example would be, especially now that I’m a mother, […] women leaders need to be in certain slots for people to feel comfortable, and one of those roles is the maternal role. So if I am going around asking people, “have you done your work yet?”, and I’m doing it in a way that they can see as motherly, it’s more comfortable than as some young woman trying to nag them. Another thing is that there’s sort of an expectation that women will be better at collaborative tasks, at mentoring, at documenting and explaining things. And there’s certainly been times in my career when I was good at those tasks and there’d be other periods where I was in a more solitary mode for whatever reason. And I definitely think people can relate to me better when I’m slotting into those sort of pink skills a little more clearly.</p>
<hr>
<p><a href="http://oleb.net/blog/2015/01/code-vs-poetry/" target="_blank" rel="external">http://oleb.net/blog/2015/01/code-vs-poetry/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>David Plotz did an interesting <a href="http://www.slate.com/articles/podcasts/working/2014/12/google_software_engineer_nina_kang_talks_about_the_differences_between_writing.html">interview with Google engineer Nina Kang</a> for the <a href="http://www.slate.com/articles/podcasts/working.html">Working podcast</a>. Here’s an excerpt (edited for clarity):<br>T:大卫.普拉茲向在Working podcast工作的Google工程师康芯寧做了一次有趣的采访。这是谈话摘录（经过后期编辑润色）:</p>
<p>Q: What is it when you’re writing code that makes particular code really good?<br>T: 是什么让你写特定代码时做得很好？</p>
<p>A: It depends on the situation and the company. Google is a very collaborative company. There were almost a thousand programmers on Google Maps. To my mind, what makes code good is that it is almost anonymous. You shouldn’t be able to read that code and say, oh, Kevin down the hall wrote it. Because if it’s idiosyncratic in that way, it means that it’s not something that’s gonna be so easy for other people to modify. Everyone should write in a uniform enough style within a team that we can easily grasp each other’s code and modify it. And there are a couple of things that I look for when I’m looking at code. One of the things is how few lines would it take for it to be modified. Code that requires a lot of repetition, some people find that poetic, but I find that tedious. […]<br>T: 这要取决于所处的环境和所在的公司。Google是一家特别讲究合作的公司。Google地图的程序员差不多有一千多名。</p>
<p>Q: Great word there, poetic. What does that mean when you say, some people find it poetic?</p>
<p>A: Computer programmers pride ourselves on writing elegant code, or poetic code. But usually what that means is writing code the way the individual programmer thinks is good and that is incredibly subjective. … I think that poetic code is code that you can read [easily]. […]</p>
<p>Q: Will great coders come up with very different solutions to a problem than non-great coders?</p>
<p>A: Absolutely. Great coders come up with solutions that are usually more concise and more easily verified. I think that the key metric is, can someone else read this code and confirm that it works by building a mental model in their head of what the computer’s gonna do at different steps? There are certain things that are really simple, like finding out how many characters are in a line, that you could write in a way that would confuse everybody. But if your code is well written, people understand what it does and they can tell that it works right away.</p>
<p>Q: So elegance, to your mind, corresponds with clarity and concision?</p>
<p>A: Yes, absolutely, just like English.<br>]]>
    
    </summary>
    
      <category term="code" scheme="http://qunwang6.github.io/blog/tags/code/"/>
    
      <category term="poetry" scheme="http://qunwang6.github.io/blog/tags/poetry/"/>
    
      <category term="code" scheme="http://qunwang6.github.io/blog/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[\BGL\DSL\MDX\CD\ ===> OS X dictionary]]></title>
    <link href="http://qunwang6.github.io/blog/OSXDictionary/"/>
    <id>http://qunwang6.github.io/blog/OSXDictionary/</id>
    <published>2015-05-07T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:44.000Z</updated>
    <content type="html"><![CDATA[<p><code>首发于pdawiki</code></p>
<h3 id="开源项目：PYGLOSSARY">开源项目：PYGLOSSARY</h3><ul>
<li><a href="https://github.com/ilius/pyglossary" target="_blank" rel="external">PYGLOSSARY</a></li>
<li><a href="https://bitbucket.org/james_taylor/python-lzo-static" target="_blank" rel="external">python-lzo</a></li>
</ul>
<h3 id="准备好以下环境：">准备好以下环境：</h3><blockquote>
<ul>
<li>BeautifulSoup4 required to sanitize html contents.<br> <code>sudo easy_install beautifulsoup4 html5lib</code></li>
<li>GNU make as part of <a href="http://developer.apple.com/downloads" target="_blank" rel="external">Command Line Tools for Xcode.</a></li>
<li>Dictionary Development Kit as part of <a href="http://developer.apple.com/downloads" target="_blank" rel="external">Auxillary Tools for Xcode</a>.将Dictionary Development Kit解压到<strong>/Applications/Utilities/DictionaryDevelopmentKit/  </strong>（不含空格,中文名:应用程序/实用工具那里，也可以解压到其它地方。）</li>
</ul>
</blockquote>
<a id="more"></a>
<hr>
<h3 id="BGL_===&gt;_OSX-dictionary">BGL ===&gt; OSX.dictionary</h3><p>转换</p>
<pre><code>python pyglossary<span class="class">.pyw</span> --read-options=resPath=OtherResources --write-format=AppleDict dict<span class="class">.bgl</span> dict.xml
</code></pre><p>编译</p>
<ul>
<li>在Makefile里设置好相关参数和路径，如DICT_NAME是生成文件的名称，DICT_BUILD_TOOL_DIR是Dictionary Development Kit的路径，如果错了就不能生成文件。</li>
<li>编辑模板文件中的Info.plist文件，<code>CFBundleName</code>是在Mac字典程序工具栏下面显示的标签名，<code>CFBundleDisplayName</code>是词典名称.<code>CFBundleIdentifier</code>是词典的ID，需保持唯一性。</li>
<li>根据模板格式编辑Dictionary.xml、Dictionary.css，如果有图片则放置在OtherResources/目录下.</li>
<li>打开终端，cd进入模板文件目录，输入<code>make</code>，稍等一段时间，即可生成字典文件,将object目录下生成的dictionary文件拷贝至 ~/Library/Dictionaries，打开字典程序，即可看到生成的字典。<br>或者直接用<code>make &amp;&amp; make install</code>这个命令，生成词典后直接安装到了~/Library/Dictionaries。</li>
</ul>
<p><strong>注意：如果OtherResources里的图片太多的话会出现以下错误：</strong></p>
<blockquote>
<p>/Volumes/Macintosh HD/Applications/Utilities/DictionaryDevelopmentKit//bin/build_dict.sh: line 206: /bin/cp: Argument list too long<br>Error.<br>make: <em>*</em> [all] Error 1</p>
</blockquote>
<p>可以在编译前不加入图片、语音文件，在编译完成后将图片、语音文件复制到xxx.dictionary/Contents目录下。</p>
<hr>
<h3 id="DSL_===&gt;_OSX-dictionary">DSL ===&gt; OSX.dictionary</h3><ol>
<li><p>Convert DSL from UTF-16 to UTF-8:</p>
<pre><code>iconv -f UTF-<span class="number">16</span> -t UTF-<span class="number">8</span> dict_utf16<span class="class">.dsl</span> &gt; dict_utf8.dsl
</code></pre></li>
<li><p>Using pyGlossary python project, convert UTF-8 DSL to AppleDict XML:</p>
<pre><code>python pyglossary.pyw --<span class="keyword">read</span>-<span class="keyword">format</span>=ABBYYLingvoDSL --<span class="keyword">write</span>-<span class="keyword">format</span>=AppleDict dict_utf8.dsl dict.xml
</code></pre><p><strong>lingvo格式.dsl转换成可发音的词典。(注意修改命令参数)</strong>↓</p>
<blockquote>
<p>audio conversion is optional, “no” by default. The following command works,<br>~/Development/pyglossary/pyglossary.pyw —read-option=”audio=yes” test.dsl test.xml<br>make &amp;&amp; make install</p>
</blockquote>
</li>
</ol>
<pre><code>python /Applications/Utilities/DictionaryDevelopmentKit/pyglossary/pyglossary<span class="class">.pyw</span> --read-options=<span class="string">"audio=yes"</span> --write-format=AppleDict ldoce55<span class="class">.dsl</span> ldoce55.xml
</code></pre><ol>
<li>Using Command Line Tools for Xcode and Dictionary Development Kit:<br><code>make</code><br><code>make install</code></li>
</ol>
<hr>
<h3 id="MDX_===&gt;_OSX-dictionary">MDX ===&gt; OSX.dictionary</h3><ul>
<li>转换</li>
</ul>
<pre><code>cd ~/Downloads/oald8/
~/Software/pyglossary/pyglossary<span class="class">.pyw</span> --read-options=resPath=OtherResources --write-format=AppleDict oald8<span class="class">.mdx</span> oald8.xml
</code></pre><ul>
<li><p>修改.xml文件里的链接</p>
<pre><code>sed -<span class="tag">i</span> <span class="string">""</span> <span class="string">'s:src="/:src=":g'</span> oald8<span class="class">.xml</span>
sed -<span class="tag">i</span> <span class="string">""</span> <span class="string">'s|sound://\([/_a-zA-Z0-9]*\).spx|\1.wav|g'</span> oald8.xml
</code></pre></li>
</ul>
<blockquote>
<p>第一个是去掉”/“<br>第二个是吧”.spx”改成”.wav”</p>
</blockquote>
<ul>
<li>将.spx语音文件转换成.wav(需要安装speex，麻烦!可直接从lingvo那里复制）</li>
</ul>
<pre><code><span class="title">find</span> OtherResources -name <span class="string">"*.spx"</span> -execdir sh -c <span class="string">'spx={};speexdec <span class="variable">$spx</span>  <span class="variable">${spx%.*}</span>.wav'</span> \
</code></pre><ul>
<li>编译</li>
</ul>
<pre><code><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install
</code></pre><blockquote>
<p>注意：如果OtherResources里的图片和语音文件太多的话会出现错误，可以在编译前不加入图片和语音文件，在编译完成后将图片复制到xxx.dictionary/Contents目录下。</p>
</blockquote>
<hr>
<h3 id="修改单词内部的链接">修改单词内部的链接</h3><blockquote>
<p>The x-dictionary: URI contains three elements separated by colons as the general form—target selector, target text, and dictionary bundle ID. The target selector must be either <code>d</code>(for definition) or <code>r</code> (for reference). Use d if you want to search definitions of the following key text. Use <code>r</code>if you want to refer to the entry specified by the reference ID which must be unique to each dictionary.<br>辞書.appの辞書を引くURLスキームに<br>次のようなものもあります。<br>x-dictionary:d:key_text:dict_bundle_id<br>x-dictionary:r:reference_id:dict_bundle_id<br><strong>１key_text 　　 調べたい単語
</strong>２reference_id 辞書を作るために作成するdictionary.xmlの<br>各タイトルごとに割り当てる固有のエントリーID</p>
<p><d:entry id="0ABCDE" d:title="案の定"><br>**３dict_bundle_id 辞書の中のInfo.plistのBundle identifierの値<br>(例えば大辞泉の場合はcom.apple.dictionary.Daijisen)</d:entry></p>
</blockquote>
<ul>
<li>单词跳转用<code>x-dictionary:r:</code><br>(只能在当前词典内跳转且<code>x-dictionary:r:</code>后的单词大小写须与d:entry id=”<code>***</code>“里的大小写一致，不能有空格否则不能跳转。。）</li>
<li>单词查找用<code>x-dictionary:d:</code><br>（会先搜索当前的词典，若没有，会调用其它词典搜索，不限大小写、空格。）<br>（基本上都是用r,用d很少)</li>
</ul>
<h3 id="ex-">ex.</h3><pre><code><span class="xml"><span class="tag">&lt;<span class="title">d:entry</span> <span class="attribute">id</span>=<span class="value">"make a face"</span> <span class="attribute">d:title</span>=<span class="value">"make a face"</span>&gt;</span>
<span class="tag">&lt;<span class="title">d:index</span> <span class="attribute">d:value</span>=<span class="value">"make a face"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span><span class="tag">&lt;<span class="title">body</span>&gt;</span><span class="tag">&lt;<span class="title">h1</span>&gt;</span>make a face<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"entry://grimace"</span>&gt;</span>grimace<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">body</span>&gt;</span><span class="tag">&lt;/<span class="title">html</span>&gt;</span>
<span class="tag">&lt;/<span class="title">d:entry</span>&gt;</span>

<span class="tag">&lt;<span class="title">d:entry</span> <span class="attribute">id</span>=<span class="value">"make faces"</span> <span class="attribute">d:title</span>=<span class="value">"make faces"</span>&gt;</span>
<span class="tag">&lt;<span class="title">d:index</span> <span class="attribute">d:value</span>=<span class="value">"make faces"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span><span class="tag">&lt;<span class="title">body</span>&gt;</span><span class="tag">&lt;<span class="title">h1</span>&gt;</span>make faces<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"entry://make a face"</span>&gt;</span>make a face<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">body</span>&gt;</span><span class="tag">&lt;/<span class="title">html</span>
&lt;/<span class="attribute">d:entry</span>&gt;</span></span>
</code></pre><blockquote>
<p><strong>“entry://grimace”</strong><br>将<code>entry://</code>替换为<code>x-dictionary:r:</code></p>
</blockquote>
<p>===&gt;<code>&quot;x-dictionary:r:grimace&quot;</code></p>
<h4 id="不能有空格">不能有空格</h4><p><strong>d:entry id=”make a face”<br>href=”entry://make a face”</strong><br>类似上面的单词，中间不能有空格，否则单词间不能跳转。<br>===&gt;<br>d:entry id=”make_a_face”<br>href=”x-dictionary:r:make_a_face”</p>
<p>正则替换：<code>(&lt;d:entry id=&quot;[^&quot;]+)\s</code>替换为:<code>\1_</code><br><code>(href=&quot;x-dictionary:r:[^&quot;]+)\s</code>替换为<code>\1_</code></p>
<h4 id="不能含有&#39;or’符号">不能含有<code>&#39;</code>or<code>’</code>符号</h4><p>正则替换：<code>(href=&quot;x-dictionary:r:[^&quot;]+)’</code><br><code>(&lt;d:entry id=&quot;[^&quot;]+)’</code><br>替换为<code>\1-</code></p>
<h3 id="词组/词性跳转、定位">词组/词性跳转、定位</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">词组/词性页面内定位</span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"LP_OS"</span> <span class="attribute">href</span>=<span class="value">"entry://#L_hkx1"</span>&gt;</span>suffix<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">name</span>=<span class="value">"L_hkx1"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">==&gt; <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"LP_OS"</span> <span class="attribute">href</span>=<span class="value">"#L_hkx1"</span>&gt;</span>suffix<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">------------------</span><br><span class="line">词组/词性跳转并定位</span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"entry://clip#ld3097"</span>&gt;</span>clip<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">name</span>=<span class="value">"ld3097"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"L_IDOM"</span>&gt;</span>$100 / 50 cents etc a clip<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">==&gt; <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"x-dictionary:r:clip:#ld3097"</span>&gt;</span>clip<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">用到的正则表达式：</span><br><span class="line">x-dictionary:r:(.+?)#</span><br><span class="line">替换为：</span><br><span class="line">x-dictionary:r:\1:#</span><br><span class="line">相关的词典：朗文当代英语词典英汉双解第4版</span><br><span class="line">Shorter Oxford English Dictionary Sixth Edition</span><br></pre></td></tr></table></figure>
<h3 id="语音">语音</h3><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&lt;audio <span class="variable">id=</span><span class="string">"\1"</span> <span class="variable">src=</span><span class="string">"Sounds\/\1"</span> <span class="variable">type=</span><span class="string">"audio/mpeg"</span>/&gt;&lt;img <span class="variable">class=</span><span class="string">"sound"</span> <span class="variable">src=</span><span class="string">"Sound.png"</span> <span class="variable">onmouseover=</span><span class="string">"document.getElementById('\1').play(); return false;"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="高亮搜索关键词">高亮搜索关键词</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">d:index</span> <span class="attribute">d:value</span>=<span class="value">"make it"</span> <span class="attribute">d:parental-control</span>=<span class="value">"1"</span> <span class="attribute">d:anchor</span>=<span class="value">"xpointer(//*[@id='make_it'])"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">d:parental-control</span>=<span class="value">"1"</span> <span class="attribute">d:priority</span>=<span class="value">"2"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">h3</span>&gt;</span>PHRASES<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"make_it"</span>&gt;</span><span class="tag">&lt;<span class="title">b</span>&gt;</span>make it<span class="tag">&lt;/<span class="title">b</span>&gt;</span> : succeed in something; survive.<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">h4</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"x-dictionary:r:make_up_ones_mind"</span>&gt;</span><span class="tag">&lt;<span class="title">b</span>&gt;</span>make up one's mind<span class="tag">&lt;/<span class="title">b</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">h4</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>===&gt;<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&lt;<span class="string">d:</span>index <span class="string">d:</span>value=<span class="string">"make it"</span> <span class="string">d:</span>anchor=<span class="string">"xpointer(//*[@id='make_it'])"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="附录">附录</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">d:entry</span> <span class="attribute">id</span>=<span class="value">"front_back_matter"</span> <span class="attribute">d:title</span>=<span class="value">"Front/Back Matter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">d:entry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">添加以下值到Info.plis或者编译前的.plist文件</span><br><span class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>DCSDictionaryFrontMatterReferenceID<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">string</span>&gt;</span>front_back_matter<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>entry id值要与string里的值一样<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>CFBundleIdentifier<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">string</span>&gt;</span>com.apple.xxxx<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">	必须为英文字符，否则不能显示附录。</span><br></pre></td></tr></table></figure></p>
<h3 id="词条自动合并">词条自动合并</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&lt;<span class="string">d:</span>entry id=<span class="string">"1"</span> <span class="string">d:</span>title=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;<span class="string">d:</span>index <span class="string">d:</span>value=<span class="string">"a"</span>/&gt;</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&lt;/<span class="string">d:</span>entry&gt;</span><br><span class="line">&lt;<span class="string">d:</span>entry id=<span class="string">"2"</span> <span class="string">d:</span>title=<span class="string">"2"</span>&gt;</span><br><span class="line">    &lt;<span class="string">d:</span>index <span class="string">d:</span>value=<span class="string">"a"</span>/&gt;</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&lt;/<span class="string">d:</span>entry&gt;</span><br><span class="line">&lt;<span class="string">d:</span>entry id=<span class="string">"3"</span> <span class="string">d:</span>title=<span class="string">"3"</span>&gt;</span><br><span class="line">    &lt;<span class="string">d:</span>index <span class="string">d:</span>value=<span class="string">"a"</span>/&gt;</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&lt;/<span class="string">d:</span>entry&gt;</span><br></pre></td></tr></table></figure>
<p><code>&lt;d:index d:value=&quot;a&quot;/&gt;</code>值相同，查a时，全部合并在同一页面显示。<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&lt;<span class="string">d:</span>entry id=<span class="string">"1"</span> <span class="string">d:</span>title=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;<span class="string">d:</span>index <span class="string">d:</span>value=<span class="string">"a"</span>/&gt;</span><br><span class="line">    &lt;<span class="string">d:</span>index <span class="string">d:</span>value=<span class="string">"b"</span>/&gt;</span><br><span class="line">a</span><br><span class="line">&lt;/<span class="string">d:</span>entry&gt;</span><br><span class="line">&lt;<span class="string">d:</span>entry id=<span class="string">"2"</span> <span class="string">d:</span>title=<span class="string">"2"</span>&gt;</span><br><span class="line">    &lt;<span class="string">d:</span>index <span class="string">d:</span>value=<span class="string">"b"</span>/&gt;</span><br><span class="line">b</span><br><span class="line">&lt;/<span class="string">d:</span>entry&gt;</span><br></pre></td></tr></table></figure></p>
<p>id=”1”里只有a；id=”2”含有a和b。<br>==&gt;查找a，只有一个；查找b，有两个，合并。<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&lt;<span class="string">d:</span>entry id=<span class="string">"1"</span> <span class="string">d:</span>title=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;<span class="string">d:</span>index <span class="string">d:</span>value=<span class="string">"a b"</span>/&gt;</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">&lt;/<span class="string">d:</span>entry&gt;</span><br><span class="line">&lt;<span class="string">d:</span>entry id=<span class="string">"2"</span> <span class="string">d:</span>title=<span class="string">"2"</span>&gt;</span><br><span class="line">    &lt;<span class="string">d:</span>index <span class="string">d:</span>value=<span class="string">"a-b"</span>/&gt;</span><br><span class="line">b</span><br><span class="line">&lt;/<span class="string">d:</span>entry&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>a b</code>与<code>a-b</code>相似，合并。<br>id=”1”里有ab；id=”2”有ba。</p>
<h3 id="隐藏_词条/搜索结果">隐藏 词条/搜索结果</h3><ul>
<li>需要电脑打开家长控制</li>
<li>在词条中加入<code>d:parental-control=&quot;1&quot;</code>标签，含有这个标签的词条或句子就不会显示。</li>
</ul>
<h3 id="其他">其他</h3><ul>
<li><p><code>&lt;d:index d:value=&quot;made&quot; d:title=&quot;made (make)&quot;/&gt;</code>查找made,索引栏显示made (make)。</p>
</li>
<li><p><code>@@@LINK=(?&lt;sub&gt;.*?)&lt;/body&gt;</code><br>===&gt;<br><code>&lt;a href=&quot;x-dictionary:r:\1&quot;&gt;\1&lt;/a&gt;&lt;/body&gt;</code></p>
</li>
</ul>
<blockquote>
<p>在 XHTML 中不鼓励使用 name 属性，应该使用 id 取而代之。</p>
</blockquote>
<h3 id="help">help</h3><blockquote>
<p>(run “pyglossary.pyw —help” for more info), or use Tkinter interface:<br>Install python-tk using “pip install python-tk” or somehow else (i don’t know much about Mac)<br>Then run the program with: python pyglossary.pyw —ui=tk</p>
</blockquote>
<h3 id="RuntimeError">RuntimeError</h3><blockquote>
<p><strong>RuntimeError: maximum recursion depth exceeded while calling a Python object</strong><br>The conversion stops when cleaning item “non-“. The html text maybe buggy to cause many time recursion. Here is a workaround, insert the following lines at the top of file pyglossary/plugins/appledict.py<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.<span class="function"><span class="title">setrecursionlimit</span><span class="params">(<span class="number">10000</span>)</span></span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>But be aware that this item cannot be displayed at all. The above line is only to avoid runtime exception.</p>
<h3 id="常用正则表达式">常用正则表达式</h3><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">(\w+)</span><br><span class="line">(\w+.mp3)</span><br><span class="line">(?&lt;sub&gt;.<span class="strong">*?)</span><br><span class="line">(.*</span>?)</span><br><span class="line">(.+?)</span><br><span class="line">(.<span class="strong">*+)</span><br><span class="line">小写转大写\U\1</span><br><span class="line">===</span><br><span class="line">去下划线_</span><br><span class="line">(&lt;d:index d:value="[^"]+)_</span><br><span class="line">\1</span><br><span class="line">===</span><br><span class="line">&lt;h1&gt;advance_2&lt;/h1&gt;</span><br><span class="line">(&lt;h1&gt;[^\&lt;]+)_</span><br><span class="line">\1  (后加一空格）//&lt;h1&gt; air_plane&lt;/h1&gt; ==&gt; &lt;h1&gt; air plane&lt;/h1&gt;</span><br><span class="line">===</span><br><span class="line">匹配/  // //.jpg</span><br><span class="line">&lt;sk_img (?&lt;sub&gt;.*</span>?)/(\w+).jpg" (?&lt;sub&gt;.<span class="strong">*?)”/&gt;</span><br><span class="line">(?&lt;sub&gt;.*</span>?)([^\/]+)"</span><br><span class="line"></span><br><span class="line">===</span><br><span class="line">&lt;sk<span class="emphasis">_example variant="BRE" file="uk/p/p07/p070_</span>/p070-000210864.mp3”/&gt;</span><br><span class="line"><span class="header">&lt;sk_example variant="BRE" file="(?&lt;sub&gt;.*?)/(\w+\-\w+).mp3”/&gt;</span><br><span class="line">===</span></span><br><span class="line"><span class="header">^p  ^n</span><br><span class="line">===</span></span><br><span class="line">去空行</span><br><span class="line">[^p]+</span><br><span class="line">===&gt;^p</span><br></pre></td></tr></table></figure>
<h3 id="大小写替换">大小写替换</h3><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="variable">href=</span><span class="string">"x-dictionary:r:(.+?)"</span></span><br><span class="line"><span class="variable">href=</span><span class="string">"x-dictionary:r:\L\1"</span></span><br><span class="line">&lt;d:entry <span class="variable">id=</span><span class="string">"(.+?)"</span></span><br><span class="line">&lt;d:entry <span class="variable">id=</span><span class="string">"\L\1"</span></span><br></pre></td></tr></table></figure>
<p>若大写转写会重复的词，编译会出错，不建议替换。<br>词条跳转entry id部分与x-dictionary:r:部分大小写要一致。</p>
<hr>
<h3 id="CSS部分">CSS部分</h3><ul>
<li>.apple_client-panel body{margin: 0 0 15px;font-size: 16px;}//取词小窗口修改大小</li>
<li>mdx===&gt;osx.dic  部分字体间距<br>font {padding: 2px;}</li>
</ul>
<hr>
<h3 id="显示数量限制">显示数量限制</h3><p>0001-01100<br>1000个词</p>
<hr>
<h3 id="特殊符号">特殊符号</h3><ul>
<li><p>德文字符<code>ä ü ö ß</code>替换成相应的英文字母，链接跳转用。</p>
<p>XML文档<code>&lt;htlm&gt;</code>里的 <code>&amp;amp;</code>不要替换。<br>在xml当中“&amp;”必须采用转义字符<code>&amp;amp;</code></p>
</li>
</ul>
<p><code>&amp;amp;</code>&lt;—-&amp;</p>
<p><code>&amp;copy;</code>&lt;—-&copy;</p>
<p><code>&amp;reg;</code>&lt;—-&reg;</p>
<p><code>&amp;quot;</code>&lt;—-<code>&quot;</code></p>
<p><code>&amp;apos;</code> =<code>&#39;</code></p>
<p><code>&amp;nbsp;</code>&lt;—-&nbsp;  空格 ===&gt;<code>&amp;#160;</code></p>
<p><code>&amp;lt;</code>—-&gt;<code>&lt;</code></p>
<p><code>&amp;gt;</code>—-&gt;<code>&gt;</code><br>单个<code>&lt; &gt;</code>要替换掉</p>
<h3 id="&#39;or‘符号的问题"><code>&#39;</code>or<code>‘</code>符号的问题</h3><p><code>&amp;acute;</code></p>
<p>audio id元素里不能有<code>&#39;</code> getelementbyid里也不能有<code>’</code><br>正则 <code>(&lt;audio id=&quot;[^&quot;]+)’</code><br>下载链接里不能识别’<br>wget -i 下载<br><code>‘</code> 替换为%27<br><a href="http://www.rhymer.com/RhymingDictionary/hadn%27t.html" target="_blank" rel="external">http://www.rhymer.com/RhymingDictionary/hadn%27t.html</a><br>终端命令里也不能识别文件名含有<code>’</code><br>用<code>_</code>代替</p>
<hr>
<h3 id="参考：">参考：</h3><ul>
<li><a href="http://goldendict.org/forum/viewtopic.php?f=4&amp;t=1933&amp;start=30" target="_blank" rel="external">GoldenDict Mac OS X available - Early Access Builds</a></li>
<li><a href="https://bitbucket.org/xwang/pyglossary-apple" target="_blank" rel="external">PyGlossary Overview</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/userexperience/Conceptual/DictionaryServicesProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40006152" target="_blank" rel="external">developer.apple.com</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>首发于pdawiki</code></p>
<h3 id="开源项目：PYGLOSSARY">开源项目：PYGLOSSARY</h3><ul>
<li><a href="https://github.com/ilius/pyglossary">PYGLOSSARY</a></li>
<li><a href="https://bitbucket.org/james_taylor/python-lzo-static">python-lzo</a></li>
</ul>
<h3 id="准备好以下环境：">准备好以下环境：</h3><blockquote>
<ul>
<li>BeautifulSoup4 required to sanitize html contents.<br> <code>sudo easy_install beautifulsoup4 html5lib</code></li>
<li>GNU make as part of <a href="http://developer.apple.com/downloads">Command Line Tools for Xcode.</a></li>
<li>Dictionary Development Kit as part of <a href="http://developer.apple.com/downloads">Auxillary Tools for Xcode</a>.将Dictionary Development Kit解压到<strong>/Applications/Utilities/DictionaryDevelopmentKit/  </strong>（不含空格,中文名:应用程序/实用工具那里，也可以解压到其它地方。）</li>
</ul>
</blockquote>]]>
    
    </summary>
    
      <category term="OS X" scheme="http://qunwang6.github.io/blog/tags/OS-X/"/>
    
      <category term="Python" scheme="http://qunwang6.github.io/blog/tags/Python/"/>
    
      <category term="dictionary" scheme="http://qunwang6.github.io/blog/tags/dictionary/"/>
    
      <category term="iOS" scheme="http://qunwang6.github.io/blog/tags/iOS/"/>
    
      <category term="dictionary" scheme="http://qunwang6.github.io/blog/categories/dictionary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用DSLConverter将Lingvo词典.DSL格式转换成MAC OSX可用的格式]]></title>
    <link href="http://qunwang6.github.io/blog/lingvo2osx/"/>
    <id>http://qunwang6.github.io/blog/lingvo2osx/</id>
    <published>2015-05-07T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:45.000Z</updated>
    <content type="html"><![CDATA[<h3 id="转换">转换</h3><p>下载.DSL to OS X/iOS dictionary converter<br><a href="https://github.com/svintuss/DSLConverter" target="_blank" rel="external">https://github.com/svintuss/DSLConverter</a></p>
<h4 id="windows_xp环境下：">windows xp环境下：</h4><ul>
<li>安装Python3,(Python2.7会出现以下错误)<blockquote>
<p>import urllib.parse<br>ImportError: No module named parse<br>(<em>The urllib.parse library is the Python 3 equivalent of the urlparse library used in Python 2.</em>)</p>
</blockquote>
</li>
</ul>
<ul>
<li>安装pytidylib：下载pytidylib源文件，直接编译安装<code>python setup.py install</code>；或者用easy_install安装，直接在终端里输入安装命令：<code>easy_install pytidylib</code></li>
<li>下载tidylib.dll，将tidylib.dll文件放到到Python目录下（前提Python路径已添加到系统路径里），其他系统路径应该也可以如：system32目录。</li>
<li>转换:<br><code>python dslconverter_auto.py &lt;dictionary.dsl&gt;</code></li>
</ul>
<h4 id="MAC_OSX环境下：">MAC OSX环境下：</h4><ul>
<li>安装Python3 <code>brew install python3</code><br><em>(MAC OSX 10.9.4是默认安装了Python2.7，而DSLConverter里的代码是给Python3用的，python可以多版本并存）</em></li>
<li>安装pytidylib,下载pytidylib源文件，直接用Python3编译安装， <code>python3 setup.py install</code>。<em>（注意：如果用<code>easy_install pytidylib</code>命令安装，pytidylib会被安装到Python2.7目录下。）</em></li>
<li>转换:<br><code>python3 dslconverter_auto.py &lt;dictionary.dsl&gt;</code></li>
</ul>
<hr>
<a id="more"></a>
<h3 id="编译">编译</h3><ul>
<li>下载Auxilliary Tools for Xcode:<br>打开Xcode：选择Xcode-&gt;Open Developer Tool-&gt;More Developer Tools登录苹果开发中心，下载Auxilliary Tools for Xcode</li>
<li>解压出Dictionary Development Kit保存备用，该文件夹有模板、文档、示例，Mac系统词典所有的秘密都在里面。(模板文件在Dictionary Development Kit\project_templates)，<em>最好放在<code>/Volumes/Macintosh HD/Applications/Utilities/DictionaryDevelopmentKit/</code>（没有空 格）</em></li>
<li>在Makefile里设置好相关参数和路径，如DICT_NAME是生成文件的名称，DICT_BUILD_TOOL_DIR是Dictionary Development Kit的路径，如果错了就不能生成文件。</li>
<li>编辑模板文件中的Info.plist文件，Bundle name是在Mac字典程序工具栏下面显示的标签名，Bundle identifier需确保名称的唯一性。</li>
<li>根据模板格式编辑Dictionary.xml、Dictionary.css，如果有图片则放置在OtherResources/Images目录下.</li>
<li>打开终端，cd进入模板文件目录，输入<code>make</code>，稍等一段时间，即可生成字典文件,将object目录下生成的dictionary文件拷贝至 ~/Library/Dictionaries，打开字典程序，即可看到生成的字典。<br>或者直接用<code>make &amp;&amp; make install</code>这个命令，生成词典后直接安装到了~/Library/Dictionaries。</li>
</ul>
<hr>
<h3 id="参考">参考</h3><ul>
<li>Windows下Python2.7搭建lxml环境(simplejson+tidylib+libxml2+lxml)：<br><a href="http://www.dzwanli.com.cn/?p=127" target="_blank" rel="external">http://www.dzwanli.com.cn/?p=127</a></li>
<li>请教关于 tidylib 的错误问题 ：<br><a href="http://python.6.x6.nabble.com/CPyUG-84982-tidylib-td2871364.html" target="_blank" rel="external">http://python.6.x6.nabble.com/CPyUG-84982-tidylib-td2871364.html</a></li>
<li>HTML Tidy for Windows：<br><a href="http://www.paehl.com/open_source/?HTML_Tidy_for_Windows" target="_blank" rel="external">http://www.paehl.com/open_source/?HTML_Tidy_for_Windows</a></li>
<li>PyTidyLib: A Python Interface to HTML Tidy：<br><a href="http://countergram.com/open-source/pytidylib/docs/index.html#installing-html-tidy" target="_blank" rel="external">http://countergram.com/open-source/pytidylib/docs/index.html#installing-html-tidy</a></li>
<li>Can’t install pip due to “ImportError: No module named parse”：<br><a href="http://stackoverflow.com/questions/15011205/cant-install-pip-due-to-importerror-no-module-named-parse" target="_blank" rel="external">http://stackoverflow.com/questions/15011205/cant-install-pip-due-to-importerror-no-module-named-parse</a></li>
<li>关于mac词典制作的思考和实践 ：<br><a href="http://coffeejp.com/bbs/thread-383364-1-1.html" target="_blank" rel="external">http://coffeejp.com/bbs/thread-383364-1-1.html</a></li>
<li>英辞郎をOSX10.9.2にインストール<br><a href="http://oshiete.goo.ne.jp/qa/8581257.html" target="_blank" rel="external">http://oshiete.goo.ne.jp/qa/8581257.html</a></li>
<li>How can I create a dictionary for Mac OS X?：<br><a href="http://apple.stackexchange.com/questions/80099/how-can-i-create-a-dictionary-for-mac-os-x" target="_blank" rel="external">http://apple.stackexchange.com/questions/80099/how-can-i-create-a-dictionary-for-mac-os-x</a></li>
<li>mac 自带的python到3.3 支持最新的gaogent3.0<br><a href="https://code.google.com/p/goagent/issues/detail?id=9553" target="_blank" rel="external">https://code.google.com/p/goagent/issues/detail?id=9553</a></li>
</ul>
<pre><code>Register <span class="operator">a</span> free developer account <span class="operator">and</span> download <span class="operator">the</span> auxiliary tools package <span class="built_in">from</span> developer.apple.com/downloads
Move <span class="operator">the</span> Dictionary Development Kit <span class="built_in">folder</span> <span class="built_in">to</span> /Applications/Utilities/DictionaryDevelopmentKit/ (<span class="keyword">without</span> <span class="operator">the</span> spaces), <span class="operator">and</span> copy <span class="operator">the</span> project_templates <span class="built_in">folder</span> <span class="built_in">to</span> ~/Desktop/
Open ~/Desktop/project_templates/Makefile <span class="operator">and</span> change DICT_BUILD_TOOL_DIR <span class="built_in">from</span> /DevTools/Utilities/Dictionary Development Kit <span class="built_in">to</span> /Applications/Utilities/DictionaryDevelopmentKit
cd ~/Desktop/project_templates/; make &amp;&amp; make install
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="转换">转换</h3><p>下载.DSL to OS X/iOS dictionary converter<br><a href="https://github.com/svintuss/DSLConverter">https://github.com/svintuss/DSLConverter</a></p>
<h4 id="windows_xp环境下：">windows xp环境下：</h4><ul>
<li>安装Python3,(Python2.7会出现以下错误)<blockquote>
<p>import urllib.parse<br>ImportError: No module named parse<br>(<em>The urllib.parse library is the Python 3 equivalent of the urlparse library used in Python 2.</em>)</p>
</blockquote>
</li>
</ul>
<ul>
<li>安装pytidylib：下载pytidylib源文件，直接编译安装<code>python setup.py install</code>；或者用easy_install安装，直接在终端里输入安装命令：<code>easy_install pytidylib</code></li>
<li>下载tidylib.dll，将tidylib.dll文件放到到Python目录下（前提Python路径已添加到系统路径里），其他系统路径应该也可以如：system32目录。</li>
<li>转换:<br><code>python dslconverter_auto.py &lt;dictionary.dsl&gt;</code></li>
</ul>
<h4 id="MAC_OSX环境下：">MAC OSX环境下：</h4><ul>
<li>安装Python3 <code>brew install python3</code><br><em>(MAC OSX 10.9.4是默认安装了Python2.7，而DSLConverter里的代码是给Python3用的，python可以多版本并存）</em></li>
<li>安装pytidylib,下载pytidylib源文件，直接用Python3编译安装， <code>python3 setup.py install</code>。<em>（注意：如果用<code>easy_install pytidylib</code>命令安装，pytidylib会被安装到Python2.7目录下。）</em></li>
<li>转换:<br><code>python3 dslconverter_auto.py &lt;dictionary.dsl&gt;</code></li>
</ul>
<hr>]]>
    
    </summary>
    
      <category term="OS X" scheme="http://qunwang6.github.io/blog/tags/OS-X/"/>
    
      <category term="Python" scheme="http://qunwang6.github.io/blog/tags/Python/"/>
    
      <category term="dictionary" scheme="http://qunwang6.github.io/blog/tags/dictionary/"/>
    
      <category term="lingvo" scheme="http://qunwang6.github.io/blog/tags/lingvo/"/>
    
      <category term="dictionary" scheme="http://qunwang6.github.io/blog/categories/dictionary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Joel Test]]></title>
    <link href="http://qunwang6.github.io/blog/TheJoelTest/"/>
    <id>http://qunwang6.github.io/blog/TheJoelTest/</id>
    <published>2015-05-07T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:32.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">Do</span> you <span class="keyword">use</span> source control?</span><br><span class="line">Can you make a build <span class="keyword">in</span> one step?</span><br><span class="line"><span class="keyword">Do</span> you make daily builds?</span><br><span class="line"><span class="keyword">Do</span> you have a bug <span class="keyword">database</span>?</span><br><span class="line"><span class="keyword">Do</span> you fix bugs <span class="keyword">before</span> writing new code?</span><br><span class="line"><span class="keyword">Do</span> you have an up-<span class="keyword">to</span>-<span class="built_in">date</span> schedule?</span><br><span class="line"><span class="keyword">Do</span> you have a spec?</span><br><span class="line"><span class="keyword">Do</span> programmers have quiet working conditions?</span><br><span class="line"><span class="keyword">Do</span> you <span class="keyword">use</span> the best tools money can buy?</span><br><span class="line"><span class="keyword">Do</span> you have testers?</span><br><span class="line"><span class="keyword">Do</span> new candidates <span class="keyword">write</span> code during their interview?</span><br><span class="line"><span class="keyword">Do</span> you <span class="keyword">do</span> hallway usability testing?</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">Do</span> you]]>
    </summary>
    
      <category term="program" scheme="http://qunwang6.github.io/blog/tags/program/"/>
    
      <category term="program" scheme="http://qunwang6.github.io/blog/categories/program/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[password generator]]></title>
    <link href="http://qunwang6.github.io/blog/PasswordGenerator/"/>
    <id>http://qunwang6.github.io/blog/PasswordGenerator/</id>
    <published>2015-05-07T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:43.000Z</updated>
    <content type="html"><![CDATA[<h3 id="CODE">CODE</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Playground - noun: a place where people can play</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="type">UIKit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Step 1.</span></span><br><span class="line"><span class="keyword">var</span> pwCharacters =     [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>,<span class="string">"g"</span>,<span class="string">"h"</span>,<span class="string">"i"</span>,<span class="string">"j"</span>,<span class="string">"k"</span>,<span class="string">"l"</span>,<span class="string">"m"</span>,<span class="string">"n"</span>,<span class="string">"o"</span>,<span class="string">"p"</span>,<span class="string">"q"</span>,<span class="string">"r"</span>,<span class="string">"s"</span>,<span class="string">"t"</span>,<span class="string">"u"</span>,<span class="string">"v"</span>,<span class="string">"w"</span>,<span class="string">"x"</span>,<span class="string">"y"</span>,<span class="string">"z"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"0"</span>,<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>,<span class="string">"G"</span>,<span class="string">"H"</span>,<span class="string">"I"</span>,<span class="string">"J"</span>,<span class="string">"K"</span>,<span class="string">"L"</span>,<span class="string">"M"</span>,<span class="string">"N"</span>,<span class="string">"O"</span>,<span class="string">"P"</span>,<span class="string">"Q"</span>,<span class="string">"R"</span>,<span class="string">"S"</span>,<span class="string">"T"</span>,<span class="string">"U"</span>,<span class="string">"V"</span>,<span class="string">"W"</span>,<span class="string">"X"</span>,<span class="string">"Y"</span>,<span class="string">"Z"</span>,<span class="string">"!"</span>,<span class="string">"@"</span>,<span class="string">"#"</span>,<span class="string">"$"</span>,<span class="string">"%"</span>,<span class="string">"^"</span>,<span class="string">"&amp;"</span>,<span class="string">"*"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//Step 2.</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">randomPassword</span><span class="params">(passwordLength: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> password = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> unsignedArrayCount = <span class="type">UInt32</span>(pwCharacters.<span class="built_in">count</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; passwordLength; i++ &#123;</span><br><span class="line">        <span class="keyword">var</span> unsignedRandomNumber = arc4random_uniform(unsignedArrayCount)</span><br><span class="line">        <span class="keyword">var</span> randomNumber = <span class="type">Int</span>(unsignedRandomNumber)</span><br><span class="line">        password += pwCharacters[randomNumber]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Step 3</span></span><br><span class="line"><span class="comment">//任意生成1000位密码</span></span><br><span class="line">randomPassword(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//任意生成15密码</span></span><br><span class="line"><span class="keyword">var</span> password = <span class="string">"<span class="subst">\(randomPassword(<span class="number">5</span>)</span>)-<span class="subst">\(randomPassword(<span class="number">5</span>)</span>)-<span class="subst">\(randomPassword(<span class="number">5</span>)</span>)"</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="References">References</h3><p><a href="http://www.mav3r1ck.io/one-thousand-character-password/" target="_blank" rel="external">One Thousand Character Password</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="CODE">CODE</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Playgrou]]>
    </summary>
    
      <category term="Swift" scheme="http://qunwang6.github.io/blog/tags/Swift/"/>
    
      <category term="password" scheme="http://qunwang6.github.io/blog/tags/password/"/>
    
      <category term="Swift" scheme="http://qunwang6.github.io/blog/categories/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wordnik]]></title>
    <link href="http://qunwang6.github.io/blog/Wordnik/"/>
    <id>http://qunwang6.github.io/blog/Wordnik/</id>
    <published>2015-04-30T16:00:00.000Z</published>
    <updated>2015-06-03T13:13:30.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Wordnik-Definition-Finder"><a href="https://github.com/williamrchr/Wordnik-Definition-Finder" target="_blank" rel="external">Wordnik-Definition-Finder</a></h3><blockquote>
<p>This is a Python program that pulls definitions from a list and outputs them to a text file.<br>There are two versions, one with a GUI, and one with a CLI (command line interface). Choose<br>whichever seems most appropriate for you.<br>To read words from a text file, the following configuration should be used:<br>word1,word2,word3<br>Otherwise, the program will not be able to parse your file and most likely crash.</p>
</blockquote>
<p>从文本文件中读取单词，再从wordnik.com网站获取单词释义。</p>
<h3 id="Usage:">Usage:</h3><ul>
<li><code>easy_install wordnik</code></li>
<li>命令行版本<br><code>python definitions-finder-cli.py</code><br>单词表放在text.txt。</li>
<li>图形界面版本需要安装wxpython<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">brew install wxpython</span><br><span class="line">mkdir -p ~<span class="regexp">/Library/</span>Python<span class="regexp">/2.7/</span>lib<span class="regexp">/python/</span>site-packages</span><br><span class="line">echo <span class="string">"import site; site.addsitedir('$(brew --prefix)/lib/python2.7/site-packages')"</span> &gt;&gt; ~<span class="regexp">/Library/</span>Python<span class="regexp">/2.7/</span>lib<span class="regexp">/python/</span>site-packages<span class="regexp">/homebrew.pth</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>另一种方法：<a id="more"></a><br><figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor"><span class="keyword">import</span> wxversion</span></span><br><span class="line">wxversion.<span class="keyword">select</span>(<span class="comment">'3.0')</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> wx</span></span><br></pre></td></tr></table></figure></p>
<p><code>python definition-finder.py</code><br>菜单栏open导入单词表，自动查词。</p>
<h3 id="参考：">参考：</h3><ul>
<li><a href="https://github.com/wordnik/wordnik-python" target="_blank" rel="external">wordnik-python</a></li>
<li><a href="http://stackoverflow.com/questions/26306218/wxmac-image-not-found-python-2-7-5-os-x" target="_blank" rel="external">import wx</a></li>
<li><a href="http://lxiongh.github.io/2014/10/29/install_wxPython_for_osx/" target="_blank" rel="external">Install wxPython in OSX</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Wordnik-Definition-Finder"><a href="https://github.com/williamrchr/Wordnik-Definition-Finder">Wordnik-Definition-Finder</a></h3><blockquote>
<p>This is a Python program that pulls definitions from a list and outputs them to a text file.<br>There are two versions, one with a GUI, and one with a CLI (command line interface). Choose<br>whichever seems most appropriate for you.<br>To read words from a text file, the following configuration should be used:<br>word1,word2,word3<br>Otherwise, the program will not be able to parse your file and most likely crash.</p>
</blockquote>
<p>从文本文件中读取单词，再从wordnik.com网站获取单词释义。</p>
<h3 id="Usage:">Usage:</h3><ul>
<li><code>easy_install wordnik</code></li>
<li>命令行版本<br><code>python definitions-finder-cli.py</code><br>单词表放在text.txt。</li>
<li>图形界面版本需要安装wxpython<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">brew install wxpython</span><br><span class="line">mkdir -p ~<span class="regexp">/Library/</span>Python<span class="regexp">/2.7/</span>lib<span class="regexp">/python/</span>site-packages</span><br><span class="line">echo <span class="string">"import site; site.addsitedir('$(brew --prefix)/lib/python2.7/site-packages')"</span> &gt;&gt; ~<span class="regexp">/Library/</span>Python<span class="regexp">/2.7/</span>lib<span class="regexp">/python/</span>site-packages<span class="regexp">/homebrew.pth</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>另一种方法：]]>
    
    </summary>
    
      <category term="Python" scheme="http://qunwang6.github.io/blog/tags/Python/"/>
    
      <category term="dictionary" scheme="http://qunwang6.github.io/blog/tags/dictionary/"/>
    
      <category term="dictionary" scheme="http://qunwang6.github.io/blog/categories/dictionary/"/>
    
  </entry>
  
</feed>